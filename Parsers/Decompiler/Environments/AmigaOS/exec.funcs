exec.fd
  base: _SysBase
  #0001     30  0x001e                      Supervisor ( userFunction/a5 )
  #0002     36  0x0024                    execPrivate1 ()
  #0003     42  0x002a                    execPrivate2 ()
  #0004     48  0x0030                    execPrivate3 ()
  #0005     54  0x0036                    execPrivate4 ()
  #0006     60  0x003c                    execPrivate5 ()
  #0007     66  0x0042                    execPrivate6 ()
  #0008     72  0x0048                        InitCode ( startClass/d0, version/d1 )
  #0009     78  0x004e                      InitStruct ( initTable/a1, memory/a2, size/d0 )
  #0010     84  0x0054                     MakeLibrary ( funcInit/a0, structInit/a1, libInit/a2, dataSize/d0, segList/d1 )
  #0011     90  0x005a                   MakeFunctions ( target/a0, functionArray/a1, funcDispBase/a2 )
  #0012     96  0x0060                    FindResident ( name/a1 )
  #0013    102  0x0066                    InitResident ( resident/a1, segList/d1 )
  #0014    108  0x006c                           Alert ( alertNum/d7 )
  #0015    114  0x0072                           Debug ( flags/d0 )
  #0016    120  0x0078                         Disable ()
  #0017    126  0x007e                          Enable ()
  #0018    132  0x0084                          Forbid ()
  #0019    138  0x008a                          Permit ()
  #0020    144  0x0090                           SetSR ( newSR/d0, mask/d1 )
  #0021    150  0x0096                      SuperState ()
  #0022    156  0x009c                       UserState ( sysStack/d0 )
  #0023    162  0x00a2                    SetIntVector ( intNumber/d0, interrupt/a1 )
  #0024    168  0x00a8                    AddIntServer ( intNumber/d0, interrupt/a1 )
  #0025    174  0x00ae                    RemIntServer ( intNumber/d0, interrupt/a1 )
  #0026    180  0x00b4                           Cause ( interrupt/a1 )
  #0027    186  0x00ba                        Allocate ( freeList/a0, byteSize/d0; mem/d0 )
  #0028    192  0x00c0                      Deallocate ( freeList/a0, memoryBlock/a1, byteSize/d0 )
  #0029    198  0x00c6                        AllocMem ( byteSize/d0, requirements/d1; mem/d0 )
  #0030    204  0x00cc                        AllocAbs ( byteSize/d0, location/a1 )
  #0031    210  0x00d2                         FreeMem ( memoryBlock/a1, byteSize/d0 )
  #0032    216  0x00d8                        AvailMem ( requirements/d1 )
  #0033    222  0x00de                      AllocEntry ( entry/a0 )
  #0034    228  0x00e4                       FreeEntry ( entry/a0 )
  #0035    234  0x00ea                          Insert ( list/a0, node/a1, pred/a2 )
  #0036    240  0x00f0                         AddHead ( list/a0, node/a1 )
  #0037    246  0x00f6                         AddTail ( list/a0, node/a1 )
  #0038    252  0x00fc                          Remove ( node/a1 )
  #0039    258  0x0102                         RemHead ( list/a0 )
  #0040    264  0x0108                         RemTail ( list/a0 )
  #0041    270  0x010e                         Enqueue ( list/a0, node/a1 )
  #0042    276  0x0114                        FindName ( list/a0, name/a1 )
  #0043    282  0x011a                         AddTask ( task/a1, initPC/a2, finalPC/a3 )
  #0044    288  0x0120                         RemTask ( task/a1 )
  #0045    294  0x0126                        FindTask ( name/a1; task/d0 )
  #0046    300  0x012c                      SetTaskPri ( task/a1, priority/d0 )
  #0047    306  0x0132                       SetSignal ( newSignals/d0, signalSet/d1 )
  #0048    312  0x0138                       SetExcept ( newSignals/d0, signalSet/d1 )
  #0049    318  0x013e                            Wait ( signalSet/d0 )
  #0050    324  0x0144                          Signal ( task/a1, signalSet/d0 )
  #0051    330  0x014a                     AllocSignal ( signalNum/d0 )
  #0052    336  0x0150                      FreeSignal ( signalNum/d0 )
  #0053    342  0x0156                       AllocTrap ( trapNum/d0 )
  #0054    348  0x015c                        FreeTrap ( trapNum/d0 )
  #0055    354  0x0162                         AddPort ( port/a1 )
  #0056    360  0x0168                         RemPort ( port/a1 )
  #0057    366  0x016e                          PutMsg ( port/a0, message/a1 )
  #0058    372  0x0174                          GetMsg ( port/a0 )
  #0059    378  0x017a                        ReplyMsg ( message/a1 )
  #0060    384  0x0180                        WaitPort ( port/a0 )
  #0061    390  0x0186                        FindPort ( name/a1 )
  #0062    396  0x018c                      AddLibrary ( library/a1 )
  #0063    402  0x0192                      RemLibrary ( library/a1 )
  #0064    408  0x0198                  OldOpenLibrary ( libName/a1 )
  #0065    414  0x019e                    CloseLibrary ( library/a1 )
  #0066    420  0x01a4                     SetFunction ( library/a1, funcOffset/a0, newFunction/d0 )
  #0067    426  0x01aa                      SumLibrary ( library/a1 )
  #0068    432  0x01b0                       AddDevice ( device/a1 )
  #0069    438  0x01b6                       RemDevice ( device/a1 )
  #0070    444  0x01bc                      OpenDevice ( devName/a0, unit/d0, ioRequest/a1, flags/d1 )
  #0071    450  0x01c2                     CloseDevice ( ioRequest/a1 )
  #0072    456  0x01c8                            DoIO ( ioRequest/a1 )
  #0073    462  0x01ce                          SendIO ( ioRequest/a1 )
  #0074    468  0x01d4                         CheckIO ( ioRequest/a1 )
  #0075    474  0x01da                          WaitIO ( ioRequest/a1 )
  #0076    480  0x01e0                         AbortIO ( ioRequest/a1 )
  #0077    486  0x01e6                     AddResource ( resource/a1 )
  #0078    492  0x01ec                     RemResource ( resource/a1 )
  #0079    498  0x01f2                    OpenResource ( resName/a1 )
  #0080    504  0x01f8                    execPrivate7 ()
  #0081    510  0x01fe                    execPrivate8 ()
  #0082    516  0x0204                    execPrivate9 ()
  #0083    522  0x020a                        RawDoFmt ( formatString/a0, dataStream/a1, putChProc/a2, putChData/a3 )
  #0084    528  0x0210                           GetCC ()
  #0085    534  0x0216                       TypeOfMem ( address/a1 )
  #0086    540  0x021c                         Procure ( semaport/a0, bidMsg/a1 )
  #0087    546  0x0222                          Vacate ( semaport/a0 )
  #0088    552  0x0228                     OpenLibrary ( libName/a1, version/d0; lib/d0 )
  #0089    558  0x022e                   InitSemaphore ( sigSem/a0 )
  #0090    564  0x0234                 ObtainSemaphore ( sigSem/a0 )
  #0091    570  0x023a                ReleaseSemaphore ( sigSem/a0 )
  #0092    576  0x0240                AttemptSemaphore ( sigSem/a0 )
  #0093    582  0x0246             ObtainSemaphoreList ( sigSem/a0 )
  #0094    588  0x024c            ReleaseSemaphoreList ( sigSem/a0 )
  #0095    594  0x0252                   FindSemaphore ( sigSem/a1 )
  #0096    600  0x0258                    AddSemaphore ( sigSem/a1 )
  #0097    606  0x025e                    RemSemaphore ( sigSem/a1 )
  #0098    612  0x0264                     SumKickData ()
  #0099    618  0x026a                      AddMemList ( size/d0, attributes/d1, pri/d2, base/a0, name/a1 )
  #0100    624  0x0270                         CopyMem ( source/a0, dest/a1, size/d0 )
  #0101    630  0x0276                    CopyMemQuick ( source/a0, dest/a1, size/d0 )
  #0102    636  0x027c                     CacheClearU ()
  #0103    642  0x0282                     CacheClearE ( address/a0, length/d0, caches/d1 )
  #0104    648  0x0288                    CacheControl ( cacheBits/d0, cacheMask/d1 )
  #0105    654  0x028e                 CreateIORequest ( port/a0, size/d0 )
  #0106    660  0x0294                 DeleteIORequest ( iorequest/a0 )
  #0107    666  0x029a                   CreateMsgPort ()
  #0108    672  0x02a0                   DeleteMsgPort ( port/a0 )
  #0109    678  0x02a6           ObtainSemaphoreShared ( sigSem/a0 )
  #0110    684  0x02ac                        AllocVec ( byteSize/d0, requirements/d1 )
  #0111    690  0x02b2                         FreeVec ( memoryBlock/a1 )
  #0112    696  0x02b8               CreatePrivatePool ( requirements/d0, puddleSize/d1, puddleThresh/d2; pool/d0 )
  #0113    702  0x02be               DeletePrivatePool ( poolHeader/a0 )
  #0114    708  0x02c4                     AllocPooled ( memSize/d0, poolHeader/a0; mem/d0 )
  #0115    714  0x02ca                      FreePooled ( memory/a1, poolHeader/a0 )
  #0116    720  0x02d0          AttemptSemaphoreShared ( sigSem/a0 )
  #0117    726  0x02d6                      ColdReboot ()
  #0118    732  0x02dc                       StackSwap ( newStack/a0 )
  #0119    738  0x02e2                       ChildFree ( tid/d0 )
  #0120    744  0x02e8                     ChildOrphan ( tid/d0 )
  #0121    750  0x02ee                     ChildStatus ( tid/d0 )
  #0122    756  0x02f4                       ChildWait ( tid/d0 )
  #0123    762  0x02fa                     CachePreDMA ( address/a0, length/a1, flags/d1 )
  #0124    768  0x0300                    CachePostDMA ( address/a0, length/a1, flags/d1 )
  #0125    774  0x0306                   execPrivate10 ()
  #0126    780  0x030c                   execPrivate11 ()
  #0127    786  0x0312                   execPrivate12 ()
  #0128    792  0x0318                   execPrivate13 ()
