
function initInterceptors(uiData) {

	
	function chunk(arr, size) {
		var newArr = [];
		for (var i = 0; i < arr.length; i += size) {
			newArr.push(arr.slice(i, i + size));
		}
		return newArr;
	}
	
	
	function mainInterceptor(usSpinnerService, $rootScope, $document,
			alertService, $location, AuthService) {
		$rootScope.isSpinning = true;
		return {

			request : function(config) {

				if (config.url == "rest/authenticate/isLoggedIn")
					return config;

				usSpinnerService.spin('spinner-1');
				$rootScope.isSpinning = true;
				return config;
			},

			requestError : function(config) {
				usSpinnerService.stop('spinner-1');
				$rootScope.isSpinning = false;
				return config;
			},

			response : function(res) {

				if (res.data.mainMessage == "LOGGED_IN") {
					return res;
				}

				usSpinnerService.stop('spinner-1');
				$rootScope.isSpinning = false;
				var data = res.data;

				if (uiData.login) {
					if (data.status == "SESSION_EXPIRED"
							|| data.status == "NOT_LOGGED_IN") {

						localStorage.removeItem("userId");
						$rootScope.userId = null;
						$location.path("/");
						alertService.fail('ERROR !', data.status);
					}
				}

				var errorMessages = [];
				var infoMessages = [];

				if (data.infoMessages) {

					$rootScope.messageCenter.infosMessages = [];
					$rootScope.messageCenter.errorMessages = [];

					var found = data.infoMessages.infoMessages;

					if (found && Array === found.constructor) {
						infoMessages = data.infoMessages.infoMessages;
					} else {

						if ((found != undefined) || !(found == null)) {

							infoMessages.push(found);
						}
					}

					for (var m in infoMessages) {

						alertService.success('SUCCESS !',
								infoMessages[m].message);

					}
					;
				}

				if (data.errorMessages) {

					$rootScope.messageCenter.infosMessages = [];
					$rootScope.messageCenter.errorMessages = [];

					var found = data.errorMessages.errorMessages;

					if (found && Array === found.constructor) {
						errorMessages = data.errorMessages.errorMessages;
					} else {

						if ((found != undefined) || !(found == null)) {

							errorMessages.push(found);
						}
					}
					$rootScope.messageCenter.errorMessages = chunk(
							errorMessages, 5);
				}

				angular.forEach(angular.element(".has-error"), function(value,
						key) {

					angular.element(value).removeClass('has-error');

				});

				angular.forEach(angular.element(".label-has-error"), function(
						value, key) {

					angular.element(value).removeClass('label-has-error');

				});

				for (m in errorMessages) {

					var faultyElement = angular.element($document[0]
							.querySelector('#' + (errorMessages[m]).isFor));

					var faultyElementLabel = angular.element($document[0]
							.querySelector('#' + (errorMessages[m]).isFor
									+ "_label"));

					faultyElement.addClass('has-error');
					faultyElementLabel.addClass('label-has-error');
				}
				;

				return res;
			},

			responseError : function(res) {
				usSpinnerService.stop('spinner-1');
				return res;
			}

		}
	}
	;

	angular.module("AZ_PORTAL").factory('mainInterceptor', mainInterceptor);
	
	angular.module("AZ_PORTAL").config(
			function($httpProvider) {
				$httpProvider.interceptors
						.push('mainInterceptor');

			});

}
