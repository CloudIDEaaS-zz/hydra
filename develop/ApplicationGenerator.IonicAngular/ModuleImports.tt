<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Manager.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ModuleImportsHelper\bin\Debug\ModuleImportsHelper.dll" #>
<#@ assembly name="$(SolutionDir)Utils\bin\Debug\Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Utils" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var fileManager = Manager.Create(Host, GenerationEnvironment);
    var helper = new ModuleImportsHelper.Helper();
    var copyFiles = new Dictionary<string, string>();
    var rootPath = this.Host.ResolvePath(string.Empty);
    var createOtherClasses = true;

    // todo kn - support built in handler creation

    /** input to all outputs here *******************************************************/

    var creationObjects = new List<object>()
    {
        new { NgxTranslate = new { Modules = new List<string> { "TranslateService" }, ImportPath = "@ngx-translate/core" }},
        new { AgGridAngular = new { Modules = new List<string> { "AgGridNg2" }, ImportPath = "ag-grid-angular" }},
        new { AgGrid = new { Modules = new List<string> { "ICellEditorComp" }, ImportPath = "ag-grid" }},
        new { AngularTextMask = new { Modules = new List<string> { "TextMaskModule" }, ImportPath = "angular2-text-mask" }},
        new { SuperTabs = new { Modules = new List<string> { "SuperTabsModule" }, ImportPath = "ionic2-super-tabs" }},
        new { LinqCollections = new { Modules = new List<string> { "List" }, ImportPath = "linq-collections" }},
        new { RxJsMap = new { ImportPath = "rxjs/add/operator/map" }},
        new { RxJsObservable = new { Modules = new List<string> { "Observable" }, ImportPath = "rxjs" }},
        new { AngularProvider = new { Modules = new List<string> { "Injectable", "Component" }, ImportPath = "@angular/core" }},
        new { Angular = new { Modules = new List<string> { "Component", "NgZone", "ViewChild", "OnInit" }, ImportPath = "@angular/core" }},
        new { AngularRouter = new { Modules = new List<string> { "Router" }, ImportPath = "@angular/router" }}, 
        new { AngularValidator = new { Modules = new List<string> { "Validators", "FormGroup", "FormControl", "AbstractControl", "ValidatorFn" }, ImportPath = "@angular/forms", AddFrom = "AngularProvider, NgxTranslate" }},
        new { AngularForms = new { Modules = new List<string> { "Validators", "FormGroup", "FormControl", "AbstractControl", "ValidatorFn" }, ImportPath = "@angular/forms" }},
        new { Ionic = new { Modules = new List<string> { "NavController", "LoadingController", "IonRouterOutlet", "ToastController", "Config" }, ImportPath = "@ionic/angular", CombineName = "IONIC_BASIC_PAGE_IMPORTS", AddFrom = "NgxTranslate" }},
        new { IonicGridPage = new { Modules = new List<string> { "NavController", "LoadingController", "NavParams", "Toast", "AlertController", "PopoverController" }, ImportPath = "@ionic/angular", InheritsFrom = "Ionic", CombineName = "IONIC_GRID_PAGE_IMPORTS", AddFrom = "NgxTranslate, AgGridAngular, AgGrid, LinqJavascript, RxJsMap" }},
        new { IonicEditPage = new { Modules = new List<string> { "NavController", "LoadingController", "NavParams", "ViewController" }, ImportPath = "@ionic/angular", InheritsFrom = "Ionic", CombineName = "IONIC_EDIT_PAGE_IMPORTS", AddFrom = "NgxTranslate, LinqJavascript, RxJsObservable, AngularForms, AngularTextMask" }},
        new { IonicGridPageBuiltIn = new { Modules = new List<string> { "GridPage", "PageName", "RecordExpression", "EditDeleteButtons" }, ImportPath = "BuiltIn" }},
        new { IonicEditPageBuiltIn = new { Modules = new List<string> { "UsablePopover" }, ImportPath = "BuiltIn" }},
        new { IonicPageBuiltIn = new { Modules = new List<string> { "Authorize" }, ImportPath = "BuiltIn" }},
        new { AngularValidationPageBuiltIn = new { Modules = new List<string> { "ValidationMap" }, ImportPath = "BuiltIn" }},
        new { CombineName = "IONIC_ANGULAR_BASIC_PAGE_IMPORTS", AddFrom = "Ionic, IonicPageBuiltIn, Angular, AngularRouter, LinqJavascript" },
        new { CombineName = "IONIC_ANGULAR_SUPERTABS_PAGE_IMPORTS", AddFrom = "Ionic, IonicPageBuiltIn, Angular, AngularRouter, SuperTabs" },
        new { CombineName = "IONIC_ANGULAR_GRID_PAGE_IMPORTS", AddFrom = "IonicGridPage, IonicPageBuiltIn, Angular, AngularRouter, IonicGridPageBuiltIn" },
        new { CombineName = "IONIC_ANGULAR_EDIT_PAGE_IMPORTS", AddFrom = "Angular, AngularRouter, IonicEditPage, IonicPageBuiltIn, IonicEditPageBuiltIn" },
        new { CombineName = "ANGULAR_VALIDATION_PAGE_IMPORTS", AddFrom = "AngularValidator, AngularValidationPageBuiltIn" }
    };

    /** end input *******************************************************/

    helper.AddPackages(creationObjects);
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace AbstraX
{
<#
    foreach (var package in helper.Packages)
    {
        if (!package.IsPackageGroupOnly)
        {
#>
    public enum <#= package.PackageName #>Modules : ulong
    {
<#
            foreach (var module in package.Modules)
            {
                if (module.ModuleName == "[Default]")
                {
#>
        [ModuleImportDeclaration("<#= module.Package.ImportPath #>")]
        Default = <#= module.ModuleId #>,
<#
                }
                else
                {
#>
        [ModuleImportDeclaration("<#= module.ModuleName #>", "<#= module.Package.ImportPath #>")]
        <#= module.ModuleName.RemoveSurrounding("[", "]") #> = <#= module.ModuleId #>,
<#
                }
            }
#>
    }

<#
        }
    }
#>
    [ModuleImports()]
    public static class ModuleImports
    {
        public const ulong APPLICATION_IMPORT_HANDLER_ID = ulong.MinValue;
<#
    foreach (var package in helper.Packages)
    {
        if (!package.IsPackageGroupOnly)
        {
#>
        public const ulong <#= package.HandlerIdName #> = <#= package.HandlerId #>;
        public const string <#= package.HandlerIdStringName #> = "<#= package.HandlerIdString #>";
<#
            foreach (var module in package.Modules)
            {
#>
        public const ulong <#= module.ModuleIdName #> = <#= module.ModuleId #>;
        public const string <#= module.ModuleIdStringName #> = "<#= module.ModuleIdString #>";
        public const string <#= module.ModuleGuidIdName #> = "<#= module.ModuleGuidId #>";
<#
            }
        }

        if (package.CombinedName != null)
        {
#>
        public const string <#= package.CombinedName #> = <#= package.CombinedNameValue #>;
<#
        }
    }

    foreach (var package in helper.Packages)
    {
        if (!package.IsPackageGroupOnly)
        {
            if (createOtherClasses)
            {
                var outputFileName = package.PackageName + "ImportHandler.txt";
                var importHandlers = this.Host.ResolvePath(@"Handlers/ImportHandlers");
                string outputFile;
                string copyToFile;
                string packages;

                fileManager.StartNewFile(outputFileName);
#>
using AbstraX.ImportHandlers.Packages;

namespace AbstraX.ImportHandlers
{
<#
                if (package.InheritsFrom != null)
                {
#>
    [ImportHandler(ModuleImports.<#= package.HandlerIdName #>)]
    public class <#= package.PackageName #>ImportHandler : <#= package.InheritsFrom #>ImportHandler
    {
        public override void AddImport(ulong moduleId)
        {
            base.AddImport((<#= package.PackageName #>Modules)moduleId);
        }
    }
}
<#
                }
                else
                {
#>
    [ImportHandler(ModuleImports.<#= package.HandlerIdName #>)]
    public class <#= package.PackageName #>ImportHandler : BaseImportHandler<<#= package.PackageName #>Package>
    {
        public override void AddImport(ulong moduleId)
        {
            base.AddImport((<#= package.PackageName #>Modules)moduleId);
        }
    }
}
<#
                }

                outputFile = System.IO.Path.Combine(rootPath, outputFileName);
                copyToFile = System.IO.Path.Combine(importHandlers, outputFileName);

                copyFiles.Add(outputFile, copyToFile);

                //////////////////////////////////////////

                if (package.InheritsFrom == null)
                {

                    outputFileName = package.PackageName + "Package.txt";
                    importHandlers = this.Host.ResolvePath(@"Handlers\ImportHandlers");
                    packages = this.Host.ResolvePath(@"Handlers\ImportHandlers\Packages");

                    fileManager.StartNewFile(outputFileName);
#>
namespace AbstraX.ImportHandlers.Packages
{
    public class <#= package.PackageName #>Package : Package
    {
        public <#= package.PackageName #>Package()
        {
            this.PackageInstalls = new string[] { "<#= package.PackageName.ToLower() #>" };
        }
    }
}
<#
                    outputFile = System.IO.Path.Combine(rootPath, outputFileName);
                    copyToFile = System.IO.Path.Combine(packages, outputFileName);

                    copyFiles.Add(outputFile, copyToFile);
                }
            }
        }
    }

    fileManager.Process(true);

    foreach (var pair in copyFiles)
    {
        var outputFile = pair.Key;
        var copyToFile = pair.Value;

        if (System.IO.File.Exists(copyToFile))
        {
            MakeWritable(copyToFile);
            System.IO.File.Delete(copyToFile);
        }

        System.IO.File.Copy(outputFile, copyToFile);
    }
#>
    }
}

<#+

public static void MakeWritable(string filePath)
{
    var file = new FileInfo(filePath);

    if (file.IsReadOnly)
    {
        file.Attributes &= (~FileAttributes.ReadOnly);
    }
}

#>