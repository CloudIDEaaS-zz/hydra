function controllers() {

	function currentDate() {
		var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth() + 1; // January is 0!

		var yyyy = today.getFullYear();
		if (dd < 10) {
			dd = '0' + dd
		}
		if (mm < 10) {
			mm = '0' + mm
		}
		var result = mm + '/' + dd + '/' + yyyy;

		return result;
	}

	function LandingCtrl(helloService) {

		var vm = this;

		helloService.sayHello().success(function (response) {

			vm.greetings = response.mainMessage;
		});

	}
	;

	function HomeCtrl(helloService) {

		var vm = this;

		helloService.sayHello().success(function (response) {

			vm.greetings = response.mainMessage;
		});

	}
	;

	// function PaymentCtrl(paymentService, $location, $routeParams,
	// usSpinnerService, $modal, $log, $window) {
	function PaymentCtrl(paymentService, $location, $routeParams, usSpinnerService, $uibModal, $log, $window, $sce ) {

		var vm = this;
		vm.paymentInfoModel = {};
		vm.stateList = [];
		vm.yearList = [];
		vm.displayCardList = [];
		vm.displayCCPayment = true;
		vm.displayACHPayment = false;
		vm.authBtnDisabled = false;

		vm.initPaymentInformation = function () {
			var lang = $location.search().lang;
			console.log("default lang is " + lang);

			// used when editing payment information
			vm.paymentInfoModel = paymentService.getPaymentInfoModel();
			console.log("payment method " + vm.paymentInfoModel.paymentMethod);

			if ((vm.paymentInfoModel.paymentMethod == undefined) || (vm.paymentInfoModel.paymentMethod == null)) {
				// default payment method is Credit Card
				vm.paymentInfoModel.paymentMethod = 1;
			}
			if ((vm.paymentInfoModel.customerType == undefined) || (vm.paymentInfoModel.customerType == null)) {
				// default ACH customer type is Corporate
				vm.paymentInfoModel.customerType = 1;
			}
			if ((vm.paymentInfoModel.accountType == undefined) || (vm.paymentInfoModel.accountType == null)) {
				// default ACH account type is Checking
				vm.paymentInfoModel.accountType = 1;
			}
			console.log("purchase id : " + $routeParams.purchaseId);
			paymentService.checkMerchantEnablement($routeParams.purchaseId).success(function (data) {
				if (data.status == "FAILURE") {
					paymentService.setPaymentError(data.errorMessages);
					//paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
					//vm.paymentInfoModel = {};
					$location.path("/error");
					$window.scrollTo(0, 0);
				}
				if (data.status == "SUCCESS") {
					// get card type list
					paymentService.getCardTypeList().success(function (data) {
						vm.paymentInfoModel.purchaseId = $routeParams.purchaseId;
						if (data.cardTypeList) {
							var found = data.cardTypeList.cardTypes;
							if (found && Array === found.constructor) {
								vm.displayCardList = vm.displayCardList.concat(found);
							} else {
								if ((found != undefined) || !(found == null)) {
									vm.displayCardList.push(found);
								}
							}

						} else {
							vm.displayCardList = [];
						}
					});
					// get sate list
					paymentService.getStateList().success(function (data) {

						if (data.list.list && Array === data.list.list.constructor) {
							console.log(data);
							vm.stateList = data.list.list;

						} else {
							vm.stateList = [];
							vm.stateList.push(data.list.list);
						}
					});
					// get year type list
					paymentService.getYearList().success(function (data) {

						if (data.list.list && Array === data.list.list.constructor) {
							console.log(data);
							vm.yearList = data.list.list;

						} else {
							vm.yearList = [];
							vm.yearList.push(data.list.list);
						}
					});
					// get payment information
					paymentService.getPaymentXML().success(function (data) {
						vm.paymentInfoModel.lineItemList = [];
						// console.log(data);
						vm.paymentInfoModel.orderNumber = data.orderNumber;
						vm.paymentInfoModel.paymentTotal = data.paymentTotal;
						vm.paymentInfoModel.notes =  $sce.trustAsHtml(data.notes);
						vm.paymentInfoModel.merchantName = data.merchantName;
						vm.paymentInfoModel.displayCnlBtn = data.displayCnlBtn;
						
						if (data.displayACHPayment == false && data.displayCCPayment== false) 
						{
							vm.displayCCPayment = false;
							vm.displayACHPayment = false;
							vm.achDisplay = false;
							vm.ccDisplay = false;
						} 
						else  if (data.displayCCPayment == true) 
						{
							if(vm.paymentInfoModel.paymentMethod != 1 && vm.paymentInfoModel.paymentMethod != 2)
								{
									vm.paymentInfoModel.paymentMethod = 1;
								}
								vm.displayCCPayment = (vm.paymentInfoModel.paymentMethod == 1);
								vm.displayACHPayment = (vm.paymentInfoModel.paymentMethod == 2);
								if(data.displayACHPayment == true)
									{
										vm.achDisplay = true;
										vm.ccDisplay = true;
									}
								else
									{
										vm.achDisplay = false;
										vm.ccDisplay = false;
									}
						}
						else  if (data.displayACHPayment == true && data.displayCCPayment == false) 
						{
									vm.paymentInfoModel.paymentMethod = 2;
									vm.displayCCPayment = false;
									vm.displayACHPayment = true;
									vm.achDisplay = false;
									vm.ccDisplay = false;
						}
						console.log("displayCCPayment : " + vm.displayCCPayment);
						console.log("displayACHPayment : " + vm.displayACHPayment);
						console.log("achDisplay : " + vm.achDisplay);
						console.log("ccDisplay : " + vm.ccDisplay);
						console.log("paymentMethod : " + vm.paymentInfoModel.paymentMethod);
						console.log("cancel enabled : " + vm.paymentInfoModel.displayCnlBtn);

						if (data.lineItemList.lineItem) {
							var found = data.lineItemList.lineItem;
							if (found && Array === found.constructor) {
								vm.paymentInfoModel.lineItemList = vm.paymentInfoModel.lineItemList.concat(found);
							} else {
								if ((found != undefined) || !(found == null))
									vm.paymentInfoModel.lineItemList.push(found);
							}
						} else {

							vm.paymentInfoModel.lineItemList = [];
						}
					});
				}
			});
		}
		vm.validatePaymentInformation = function () {
			console.log("validatePaymentInformation");
			console.log("payment method " + vm.paymentInfoModel.paymentMethod);
			var purchaseId = $routeParams.purchaseId;
			console.log("purchaseId : " + purchaseId);

			vm.paymentInfoModel.purchaseId = $routeParams.purchaseId;

			paymentService
				.validatePaymentInfo(vm.paymentInfoModel)
				.success(
				function (data) {
					if (data.status == "SUCCESS") {
						console.log("Validation of payment info was SUCCESSFUL")
						paymentService.getFormattedPaymentInfo().success(
							function (data) {
								console.log("getting formatted payment info");
								console.log(data);
								console.log("payment method " + vm.paymentInfoModel.paymentMethod);
								if (vm.paymentInfoModel.paymentMethod === 1) {
									vm.paymentInfoModel.displayNumber = data.displayNumber;
									vm.paymentInfoModel.ccType = data.ccType;
									console.log("displayNumber " + vm.paymentInfoModel.displayNumber);
									console.log("ccType " + vm.paymentInfoModel.ccType);

								} else if (vm.paymentInfoModel.paymentMethod === 2) {
									console.log("ach display num " + data.achDisplayNumber);
									vm.paymentInfoModel.achDisplayNumber = data.achDisplayNumber;
								}


								vm.paymentInfoModel.dateFormated = data.dateFormated
								paymentService.setPaymentInfoModel(vm.paymentInfoModel);
								$location.path("/paymentSummary");
							})
					}
				});
		};
		
		vm.cancel = function () {
			console.log("Cancel Payment");
			paymentService.cancelPayment().success(function (data, status, headers) {
				console.log(headers('Content-Type'));
				console.log(headers('Location'));
				console.log(data);
				window.location = data;
				paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
			});
		}

		vm.getValidPaymentInformation = function (data, status, headers, config) {
			console.log("getValidPaymentInformation");
			vm.paymentInfoModel = paymentService.getPaymentInfoModel();
		}

		vm.updatePaymentMethod = function (paymentMethod) {

			console.log(paymentMethod);

			if (paymentMethod == 1) {
				vm.displayCCPayment = true;
				vm.displayACHPayment = false;
			} else if (paymentMethod == 2) {
				vm.displayCCPayment = false;
				vm.displayACHPayment = true;
			}

		};
		vm.editPaymentInformation = function () {
			paymentService.setPaymentInfoModel(vm.paymentInfoModel);
			// paymentService.isEditPaymentInformation=true;
			vm.authBtnDisabled = false;
			$location.path("/paymentInformation");
		}

		vm.reset = function () {
				vm.paymentInfoModel.firstName = '';
				vm.paymentInfoModel.lastName = '';
				vm.paymentInfoModel.homeAddress1 = '';
				vm.paymentInfoModel.city = '';
				vm.paymentInfoModel.state = '';
				vm.paymentInfoModel.zipCode = '';
				vm.paymentInfoModel.phoneNumber = '';
				vm.paymentInfoModel.email = '';
				vm.paymentInfoModel.creditNumber = '';
				vm.paymentInfoModel.expmonth = '';
				vm.paymentInfoModel.expyear = '';
				vm.paymentInfoModel.expmonth = '';
				vm.paymentInfoModel.csvNumber = '';
				vm.paymentInfoModel.accountNumber = '';
				vm.paymentInfoModel.company = '';
				vm.paymentInfoModel.routingNumber = '';
				vm.paymentInfoModel.accountNumber = '';
				vm.paymentInfoModel.accountNumberConfirmation = '';
				vm.paymentInfoModel.routingNumberConfirmation = '';
				vm.paymentInfoModel.accountType = 1;
				vm.paymentInfoModel.customerType = 1;
		}

		vm.processPayment = function () {
			console.log("disabling authorization btn");
			vm.authBtnDisabled = true;
			console.log("Controller: PaymentInfoModel json object");
			var lang = $location.search().lang;
			console.log("default lang is " + lang);
			vm.paymentInfoModel.language = lang;
			console.log(vm.paymentInfoModel);

			// usSpinnerService.spin('spinner-1');
			var modalInstance = $uibModal.open({
				templateUrl: 'myModalContent.html',
				controller: ModalInstanceCtrl,

				resolve: {
					paymentService: function () {
						return paymentService; // On passe à la fenêtre modal
												// une référence vers le scope
												// parent.
					},
					paymentInfoModel: function () {
						return vm.paymentInfoModel; // On passe en paramètre
													// l'id de l'élément à
													// supprimer.
					}
				}
			});


			modalInstance.result.then(function () { },
				function () { });


		};
		vm.getPaymentReceiptInformation = function () {
			console.log("getting payment receipt")
			paymentService.getReturnCode().success(function (data) {
				console.log(data);
				vm.returnCode = data;
			});

			vm.currentPaymentInfoModel = paymentService.getPaymentInfoModel();
		};

		vm.getPdfReceipt = function () {
			console.log("getting payment receipt PDF");
			var fileName = "receipt.pdf";
			var a = document.createElement("a");
			document.body.appendChild(a);
			a.style = "display: none";
			paymentService.getPdfReceipt().success(function (data) {
				var file = new Blob([data], { type: 'application/pdf' });
				// var fileURL = URL.createObjectURL(file);
				var fileURL = window.URL.createObjectURL(file);
				a.href = fileURL;
				a.download = fileName;
				//a.click();
				console.log("payment receipt PDF URL " + fileURL);
				if ($window.navigator && $window.navigator.msSaveOrOpenBlob) {
					$window.navigator.msSaveOrOpenBlob(file);
				}
				else {
				    $window.open(fileURL);
				}

			});

		};

		vm.thankYou = function () {

			paymentService.getReturnURL().success(function (data, status, headers) {
				console.log(headers('Content-Type'));
				console.log(headers('Location'));
				console.log(data);
				window.location = data;
				//paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
				//vm.paymentInfoModel = {};
			});
		};

		vm.getErrorType = function () {
			
			var error = paymentService.getPaymentError();
			if(error == undefined)
			{
				vm.serverError = true;
				return;
			}
			
			if (error.message.match("Transaction failed")) 
			{
				vm.decline = true;
				vm.declineError=error.message; 
			}
			else if (error.message.includes("already Paid")) 
			{
				vm.doublePayment = true;
				vm.doublePaymentError=error.message; 
			}
			else
			{
				switch (error.message) {
					case "merchant disabled":
						vm.merchantDisabled = true;
						break;
					case "purchase id not found":
						vm.purchaseIdNotFound = true;
						break;
					case "CardDeclined":
						vm.decline = true;
						break;
					case "thirdError":
					case "thirdUnavailable":
					case "unknownError":
						vm.callBackError = true;
						break;
					case "alreadyprocessed":
					case "secondTransaction":
						vm.secondTransaction = true;
						break;
					case "doublePayment":
						vm.doublePayment = true;
						vm.doublePaymentError = error.message; 
						break;	
					case "serverError":
						vm.serverError = true;
						break;
					default :
						vm.jbError = true;
						vm.jbErrorMsg = error.message; 
						break;
					
				}
			}
		};
	};
	var ModalInstanceCtrl = function ($uibModalInstance, paymentService, paymentInfoModel, $log, $location, $window) {
		console.log("payment processing");
		paymentService.processPayment(paymentInfoModel)
		.then(
		function onSuccess(response) {
			 // Handle success
			paymentService.setPaymentInfoModel(paymentInfoModel);
			console.log("payment status: "+response.data.status);
			if (response.data.status == "SUCCESS") {
				// usSpinnerService.stop('spinner-1');
				console.log("payment processed successfully.");
				$uibModalInstance.close();
				$location.path("/paymentReceipt");
				$window.scrollTo(0, 0);
			} else if (response.data.status == "FAILURE") {
				// usSpinnerService.stop('spinner-1');
				console.log("error processing payment.");
				paymentService.setPaymentError(response.data.errorMessages.errorMessages);
				$uibModalInstance.close();
				$location.path("/error");
				$window.scrollTo(0, 0);
			}else {
			    // Handle error
				console.log("unexpected error.");
				console.log(response);
				var error = {"isFor":"payment","message":"serverError","severity":"ERROR"};
				
				console.log(error);
				paymentService.setPaymentError(error);
				if(response.status != 524)
				{
					//paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
					//vm.paymentInfoModel = {};
				}
				$uibModalInstance.close();
				if(response.status != 524)
				{
					//paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
					//vm.paymentInfoModel = {};
					$location.path("/error");
				}
				else
				{
					$location.path("/TimeoutError");
				}
				$window.scrollTo(0, 0);
			  
			  }
		}).catch(function onError(response) {
		    // Handle error
			console.log("onError: unexpected error.");
			console.log("response");
			console.log(response);

			var error = {"errorMessages":
												{"errorMessages":
													{"isFor":"payment","message":"serverError","severity":"ERROR"}
												},
											"infoMessages":"",
											"status":"FAILURE"};
			paymentService.setPaymentError(error);
			//paymentService.clearPurchasePaymentInfo($routeParams.purchaseId);
			//vm.paymentInfoModel = {};
			$uibModalInstance.close();
			$location.path("/error");
			$window.scrollTo(0, 0);
		  
		  });
	};

/**
 * **************************************************************SCS ADMIN
 * CONTROLLER*****************************************************************
 */
	function HomeCtrl($location){
		var vm = this;
		vm.userRole = sessionStorage.getItem("userRole");
		console.log("HomeCtrl CTR user role" + vm.userRole );
		
		if(vm.userRole.indexOf("super user") !== -1) {
			vm.isSuperUser = true;
		}
		else
		{
			vm.isSuperUser = false;
		}
		console.log("isSuperUser" + vm.isSuperUser);
		vm.authBtnDisabled = false;
		if(vm.userRole.indexOf("admin") !== -1) {
			vm.isAdmin = true;
		}
		else
		{
			vm.isAdmin = false;
		}
		
		console.log("isAdmin" + vm.isAdmin);

		vm.goToTransactionAdmin = function(){ 
			$location.path("/transactionAdmin");
		}
		vm.goToMerchantAdmin = function(){
			$location.path("/merchantAdmin");
		}
	}
	/**
	 * **************************************************************MERCHANT
	 * ADMIN
	 * CONTROLLER*****************************************************************
	 */
	function MerchantAdminCtrl(initService, merchantService, $location, $routeParams, usSpinnerService, $log, $window, $scope, $anchorScroll, $timeout, $rootScope) {

		var vm = this;

		vm.merchantList = [];
		vm.searchMerchantsList = [];

		vm.selectedMerchant = {};

		vm.searchMerchantModel = {};

		vm.showUpdateMerchantButton = false;
		vm.showAddMerchantButton = false;
		vm.showMerchantForm = false;

		vm.copiedMerchant = {};
		vm.cardTypeList = [];
		vm.copiedMerchant.notUsedCardTypes = [];
		vm.copiedMerchant.usedCardTypes = [];

		vm.cardTypeListToAdd = [];
		vm.cardTypeListToRemove = [];

		vm.successEmailArray = [];
		vm.failureEmailArray = [];

		$scope.pageSize = 20;
		$scope.pagination = {
			current: 1
		};
		vm.lastFetchIndex = 0;
		vm.watch = false;
		vm.prepareToReset = false;
		vm.isAdmin =false;
		vm.isSuperUser=false;

		vm.userRole = sessionStorage.getItem("userRole");
		console.log("Merchant Ctrl user role" + vm.userRole );
		
		if(vm.userRole.indexOf("super user") !== -1) {
			vm.isSuperUser = true;
		}
		else
		{
			vm.isSuperUser = false;
		}
		if(vm.userRole.indexOf("admin") !== -1) {
			vm.isAdmin = true;
		}
		else
		{
			vm.isAdmin = false;
		}
		

		merchantService.getAllCardTypeList().success(function (data) {
			console.log(data);
			if (data.cardTypeList) {
				var found = data.cardTypeList.cardTypes;
				if (found && Array === found.constructor) {
					vm.cardTypeList = vm.cardTypeList.concat(found);
				} else {
					if ((found != undefined) || !(found == null))
						vm.cardTypeList.push(found);
				}
			}
		});
		vm.getAllMerchants = function () {
			vm.merchantList = [];
			merchantService.getWS().then(function (response) {
				var found = response.data.merchants;
				if (found && Array === found.constructor) {
					vm.merchantList = vm.merchantList.concat(found);
				} else {
					if ((found != undefined) || !(found == null))
						vm.merchantList.push(found);
				}

				if (found && Array === found.constructor) {
					vm.searchMerchantsList = vm.searchMerchantsList.concat(found);
				} else {
					if ((found != undefined) || !(found == null))
						vm.searchMerchantsList.push(found);
				}
			});
		}
		vm.getAllMerchants();
		$scope.$watch('vm.searchMerchantModel', function (newVal, oldVal) {
			if (vm.watch == true) {
				vm.prepareToReset = true;
				vm.lastFetchIndex = 0;
			}
		}, true);

		$scope.$watch('vm.showMerchantForm', function (newValue, oldValue) {
			if (newValue === true && oldValue === false)
				$timeout(function () {
					$("html,body").animate({ scrollTop: $("#merchantForm").offset().top }, "slow");
				});
		});


		Array.prototype.indexOfId = function (id) {
			for (var i = 0; i < this.length; i++) {
				if (this[i].id === id) {
					return i;
				}
			}
			return -1;
		}
		Array.prototype.indexOfCardName = function (cardName) {
			for (var i = 0; i < this.length; i++) {
				if (this[i].cardName === cardName) {
					return i;
				}
			}
			return -1;
		}
		Array.prototype.indexOfEmail = function (email) {
			for (var i = 0; i < this.length; i++) {
				if (this[i].email === email) {
					return i;
				}
			}
			return -1;
		}
		Array.prototype.removeById = function (id) {
			var index = this.indexOfId(id);
			if (index > -1) {
				this.splice(index, 1);
			}
		}

		vm.searchMerchantById = function () {	
	
			vm.showUpdateMerchantButton = false;
			vm.showMerchantForm = false;
			
			console.log(vm.selectedMerchant);
			vm.searchMerchantsList = [];
			if ((vm.selectedMerchant == null) || (vm.selectedMerchant.id == undefined) || (vm.selectedMerchant.id == null)) {
				console.log("searching all merchants");
				vm.getAllMerchants();
			} else {
				console.log("searching merchant with id " + vm.selectedMerchant.id);
				merchantService.getMerchantById(vm.selectedMerchant.id).success(function (data, status) {
					vm.searchMerchantsList.push(data);
				});
			}
		}

		vm.showUpdateMerchantForm = function (merchant, index) {
			vm.copiedMerchant = {};
			vm.successEmailArray = [];
			vm.failureEmailArray = [];
			vm.copiedMerchant.notUsedCardTypes = [];
			vm.copiedMerchant.usedCardTypes = [];

			vm.showUpdateMerchantButton = true;
			vm.showAddMerchantButton = false;
			vm.showMerchantForm = true;
			
			
			// copy by value merchant charchteristics
			vm.copiedMerchant.id = merchant.id;
			vm.copiedMerchant.merchantId = merchant.merchantId;
			vm.copiedMerchant.service = merchant.service;
			vm.copiedMerchant.notes = merchant.notes;
			vm.copiedMerchant.achEnabled = merchant.achEnabled;
			vm.copiedMerchant.ccEnabled = merchant.ccEnabled;
			vm.copiedMerchant.enabled = merchant.enabled;
			vm.copiedMerchant.selfSendReceipt = merchant.selfSendReceipt;
			vm.copiedMerchant.sendShortReceipt = merchant.sendShortReceipt;
			vm.copiedMerchant.successMailingList = merchant.successMailingList;
			vm.copiedMerchant.callbackFailureMailingList = merchant.callbackFailureMailingList;
			vm.copiedMerchant.cnlEnabled = merchant.cnlEnabled;
			// copied merchant used card types
			if (merchant.cardTypeListModel.cardTypeList) {
				var found = merchant.cardTypeListModel.cardTypeList.cardTypes;
				if (found && Array === found.constructor) {
					vm.copiedMerchant.usedCardTypes = vm.copiedMerchant.usedCardTypes.concat(found);
				} else {
					if ((found != undefined) || !(found == null))
						vm.copiedMerchant.usedCardTypes.push(found);
				}
			}
		// else {
		// vm.copiedMerchant.usedCardTypes = [];
		// }

			// copied merchant not used card types
			if ((vm.copiedMerchant.usedCardTypes != undefined) || !(vm.copiedMerchant.usedCardTypes == null)) {
				vm.copiedMerchant.notUsedCardTypes = vm.cardTypeList.filter(function (obj) { return vm.copiedMerchant.usedCardTypes.indexOfId(obj.id) == -1; });
			} 
			// else {
			// vm.copiedMerchant.notUsedCardTypes = vm.cardTypeList;
			// }

			// copied merchant payment success mailing list
			console.log("success emails:");
			if (vm.copiedMerchant.successMailingList) {
				var tmp = vm.copiedMerchant.successMailingList.split(';');
				for (var i = 0; i < tmp.length; i++) {
					vm.successEmailArray.push({ email: tmp[i] });
				}
			}

			// copied merchant callback failure mailing list
			console.log("callback failure emails:");
			if (vm.copiedMerchant.callbackFailureMailingList) {
				tmp = vm.copiedMerchant.callbackFailureMailingList.split(';');
				for (var i = 0; i < tmp.length; i++) {
					vm.failureEmailArray.push({ email: tmp[i] });
				}
			}
			
			$("html,body").animate({ scrollTop: $("#merchantForm").offset().top }, "slow");
		}

		vm.removeCardType = function () {
			var actives = $('.list-left ul li.active').toArray();
			for (var i = 0; i < actives.length; i++) {
				var index = vm.cardTypeList.indexOfCardName(actives[i].innerHTML);
				vm.cardTypeListToRemove.push(vm.cardTypeList[index]);
			}
			$('li.active').removeClass('active');
			$('i').removeClass('glyphicon-check').addClass('glyphicon-unchecked');

			// add selected cards to notUsedCardTypes list
			Array.prototype.push.apply(vm.copiedMerchant.notUsedCardTypes, vm.cardTypeListToRemove);

			// remove selected cards from usedCardTypes list
			for (var i = 0; i < vm.cardTypeListToRemove.length; i++) {
				vm.copiedMerchant.usedCardTypes.removeById(vm.cardTypeListToRemove[i].id);
			}
			// clear list
			vm.cardTypeListToRemove.splice(0, vm.cardTypeListToRemove.length);
		}
		vm.addCardType = function () {
			var actives = $('.list-right ul li.active').toArray();
			for (var i = 0; i < actives.length; i++) {
				var index = vm.cardTypeList.indexOfCardName(actives[i].innerHTML);
				vm.cardTypeListToAdd.push(vm.cardTypeList[index]);
			}
			$('li.active').removeClass('active');
			$('i').removeClass('glyphicon-check').addClass('glyphicon-unchecked');

			// add selected cards to usedCardTypes list
			Array.prototype.push.apply(vm.copiedMerchant.usedCardTypes, vm.cardTypeListToAdd);

			// remove selected cards from notUsedCardTypes list
			for (var i = 0; i < vm.cardTypeListToAdd.length; i++) {
				vm.copiedMerchant.notUsedCardTypes.removeById(vm.cardTypeListToAdd[i].id);
			}

			// clear list for next usage
			vm.cardTypeListToAdd.splice(0, vm.cardTypeListToAdd.length)
		}

		vm.showAddMerchantForm = function () {
			vm.showUpdateMerchantButton = false;
			vm.showAddMerchantButton = true;
			vm.showMerchantForm = true;

			vm.copiedMerchant = {};
			vm.copiedMerchant.enabled = true;
			vm.copiedMerchant.achEnabled = "Y";
			vm.copiedMerchant.ccEnabled = "Y";
			vm.copiedMerchant.selfSendReceipt = true;
			vm.copiedMerchant.sendShortReceipt = false;

			vm.copiedMerchant.notUsedCardTypes = vm.cardTypeList;
			vm.copiedMerchant.usedCardTypes = [];
			vm.copiedMerchant.cnlEnabled = false;
			vm.successEmailArray = [];
			vm.failureEmailArray = [];

			$("html,body").animate({ scrollTop: $("#merchantForm").offset().top }, "slow");
		}

		vm.updateMerchant = function () {
			console.log("Merchant to update");
			vm.copiedMerchant.cardTypeListModel = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList.cardTypes = {};

			vm.copiedMerchant.cardTypeListModel.cardTypeList.cardTypes = vm.copiedMerchant.usedCardTypes;

			vm.copiedMerchant.successMailingList = vm.successEmailArray.map(function (elem) { return elem.email; })
				.join(";");
			vm.copiedMerchant.callbackFailureMailingList = vm.failureEmailArray.map(function (elem) { return elem.email; })
				.join(";");

			merchantService.updateMerchant(vm.copiedMerchant).success(function (data) {
				if (data.status == "SUCCESS") {
					vm.showUpdateMerchantButton = false;
					vm.showAddMerchantButton = false;
					vm.showMerchantForm = false;

					
					merchantService.getWS().then(function (response) {
						var found = response.data.merchants;
						// refresh merchants in drop-down list to get updates
						vm.merchantList = [];
						if (found && Array === found.constructor) {
							vm.merchantList = vm.merchantList.concat(found);
						} else {
							if ((found != undefined) || !(found == null))
								vm.merchantList.push(found);
						}

						// refresh search merchant result to get updates
						vm.searchMerchantsList = [];
						// if there's no merchant search criteria, update all
						// list
						if ((vm.selectedMerchant.id == undefined) || (vm.selectedMerchant.id == null)){
								if (found && Array === found.constructor) {
									vm.searchMerchantsList = vm.searchMerchantsList.concat(found);
								} else {
									if ((found != undefined) || !(found == null))
										vm.searchMerchantsList.push(found);
								}
						// if there's merchant search criteria, update selected
						// merchant
						}else{
							vm.searchMerchantsList.push(vm.copiedMerchant);
						}
					});
					
					$("html,body").animate({ scrollTop: $("body").offset().top }, "slow");
				}
			});
		}
		vm.clearMerchantForm = function () {
			vm.copiedMerchant = {};
			vm.copiedMerchant.cardTypeListModel = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList.cardTypes = {};
			vm.showMerchantForm = false;
			vm.showUpdateMerchantButton = false;
			vm.showAddMerchantButton = false;
			$("html,body").animate({ scrollTop: $("body").offset().top }, "slow");
		}
		vm.addMerchant = function () {
			vm.copiedMerchant.cardTypeListModel = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList.cardTypes = {};
			vm.copiedMerchant.cardTypeListModel.cardTypeList.cardTypes = vm.copiedMerchant.usedCardTypes;
			vm.copiedMerchant.successMailingList = vm.successEmailArray.map(function (elem) { return elem.email; }).join(";");
			vm.copiedMerchant.callbackFailureMailingList = vm.failureEmailArray.map(function (elem) { return elem.email; }).join(";");
			console.log("Add merchant: " + JSON.stringify(vm.copiedMerchant));

			merchantService.addMerchant(vm.copiedMerchant).success(function (data) {
				if (data.status == "SUCCESS") {
					vm.showUpdateMerchantButton = false;
					vm.showAddMerchantButton = false;
					vm.showMerchantForm = false;
					// vm.lastFetchIndex = 0;
					// vm.searchMerchantModel = {};

					// refresh merchant list in drop-down to get new data
					merchantService.getWS().then(function (response) {
						vm.merchantList =[];
						var found = response.data.merchants;
						if (found && Array === found.constructor) {
							vm.merchantList = vm.merchantList.concat(found);
						} else {
							if ((found != undefined) || !(found == null))
								vm.merchantList.push(found);
						}

						// if there's no search merchant criteria, then refresh
						// search merchant list to get new data
						if ((vm.selectedMerchant.id == undefined) || (vm.selectedMerchant.id == null)){
							vm.searchMerchantsList =[];
							if (found && Array === found.constructor) {
								vm.searchMerchantsList = vm.searchMerchantsList.concat(found);
							} else {
								if ((found != undefined) || !(found == null))
									vm.searchMerchantsList.push(found);
							}
						}
							
					});

					$("html,body").animate({ scrollTop: $("body").offset().top }, "slow");
				}
			});


		}

		vm.deleteEmail = function (array, email) {
			var found = array.indexOfEmail(email);
			if (found !== -1) {
				console.log("deleting email at index " + found);
				array.splice(found, 1);
			}
		}

		vm.checkExistingEmail = function (array, email) {
			console.log("check email before add", email);
			var found = array.indexOfEmail(email);
			if (found !== -1) {
				return "Email already exists";
			}
		};

		vm.addEmail = function (array) {
			console.log("adding new email");
			array.push({ email: '', editing: true });
		}



		vm.cancelEmail = function (array, itemForm) {
			// delete empty email added when clicking Add and taping existing
			// email
			console.log("cancel email");
			var found = array.indexOfEmail('');
			console.log(found);
			if (found !== -1) {
				array.splice(found, 1);
			}
			// hide edit input
			itemForm.$hide();
		}

		vm.goBackHome =function(){
			
			$location.path("/home");
			$("html,body").animate({ scrollTop: 0 }, "slow");
		}
	}

	/**
	 * ******************************************************TRANSACTION ADMIN
	 * CONTROLLER*************************************************
	 */
	function TransactionHistoryCtrl(initService, merchantService, transactionService, $location, $routeParams, usSpinnerService, $log, $window, $scope, $timeout, $filter, $rootScope, $document) {
		var vm = this;
		vm.merchantList = [];

		vm.showTransactionList = true;
		vm.searchModel = transactionService.getBackSearchTransactionCriteria();
		vm.fromDate = transactionService.getBackFromDate();
		vm.toDate = transactionService.getBackToDate();
		vm.date = new Date();
		vm.options = '{format:"DD.MM.YYYY HH:mm", maxDate: "now"}'

		$scope.pageSize = 6;
		$scope.pagination = { current: transactionService.getBackCurrentPage() };
		vm.lastFetchIndex = 0;

		vm.watch = false;
		vm.prepareToReset = false;

			// vm.merchantList = initService.merchantList;
		merchantService.getWS().then(function (response) {
			vm.merchantList = response.data.merchants;
		});

		vm.transactionList = [];
		// vm.transactionList = initService.transactionList;
		if (transactionService.getBackTransactionList() == null) {
			transactionService.search(vm.searchModel,"NAN", "NAN").then(function (response) {
				vm.transactionList = response.data.transactions;
			});
		} else
			vm.transactionList = transactionService.getBackTransactionList();
		/*
		 * vm.searchModel.merchant = function(selected) { if (selected) {
		 * console.log("selected"); vm.searchModel.merchant =
		 * selected.originalObject;
		 *  } //else {
		 *  // vm.searchModel.merchant =
		 * transactionService.getBackSearchTransactionCriteria().merchant; //} }
		 */
		$scope.$watch('vm.searchModel', function (newVal, oldVal) {
			if (vm.watch == true) {
				vm.prepareToReset = true;
				vm.lastFetchIndex = 0;
			}
		}, true);

		$scope.$watch('vm.fromDate', function (newVal, oldVal) {
			if (vm.fromDate == null && vm.searchModel != null)
				vm.searchModel.fromPaymentDate = "";

			if ((vm.fromDate != undefined) && !(vm.fromDate == null) && (vm.fromDate !== ""))
				vm.searchModel.fromPaymentDate = vm.fromDate.format('YYYY/MM/DD HH:mm');
		}, true);

		$scope.$watch('vm.toDate', function (newVal, oldVal) {
			if (vm.toDate == null && vm.searchModel != null)
				vm.searchModel.toPaymentDate = "";

			if ((vm.toDate != undefined) && !(vm.toDate == null) && (vm.toDate !== ""))
				vm.searchModel.toPaymentDate = vm.toDate.format('YYYY/MM/DD HH:mm');
		}, true);

		$scope.$watch('vm.searchModel.merchant', function (newVal, oldVal) {
			if (vm.searchModel.merchant == null && vm.searchModel != null)
				vm.searchModel.merchantId = "";

			if ((vm.searchModel.merchant != undefined) && !(vm.searchModel.merchant == null)) {
				vm.searchModel.merchantId = vm.searchModel.merchant.id;
				// vm.searchModel.merchantId =
				// vm.searchModel.merchant.description.id;
			}
		}, true);


		// fetch the results for newPageNumber
		vm.loadNext = function (newPageNumber, oldPageNumber) {
			var l = vm.transactionList.length;
			if (l > 0 && (l <= vm.searchResultCount)) {
				var totalPages = l / $scope.pageSize;
				if (l % $scope.pageSize > 0) {
					totalPages++;
				}
				console.debug("totalPages: " + totalPages + "newPageNumber: " + newPageNumber);

				if (newPageNumber == totalPages) {
					console.debug("newPageNumber: " + newPageNumber + "= totalPages: " + totalPages);
					vm.searchTransaction("NAN", "NAN");
				}
			}
		}

		// clear search criterias
		vm.clearSearchCriterias = function(){
			
			transactionService.clearSearchCriterias();
			
			vm.searchModel = {};
			vm.fromDate = null;
			vm.toDate = null;
			angular.element("#fromTransactionDate")[0].value = null;
			angular.element("#toTransactionDate")[0].value = null;
			
		};
		
		// search transaction list
		vm.searchTransaction = function (orderBy, orderType) {

			if (vm.lastFetchIndex == vm.searchResultCount - 1 && vm.searchResultCount !== 1)
				return;
			if ((vm.lastFetchIndex >= vm.searchResultCount) && (vm.searchResultCount != 0)) {
				vm.lastFetchIndex = vm.searchResultCount - 1;
			}

			if ((vm.transactionList != undefined || !vm.transactionList == null) && orderBy != "NAN" && orderType != "NAN") {
				vm.transactionList = [];
				vm.lastFetchIndex = 0;
				$scope.pagination = { current: 1 };
			}

			if (vm.prepareToReset) {
				vm.transactionList = [];
				vm.prepareToReset = false;
			}

			vm.watch = false;
			console.log("watch become false");
			vm.searchModel.lastFetchIndex = vm.lastFetchIndex;

			$rootScope.messageCenter.errorMessages = [];
			// check search criteria
			// if((vm.merchant != undefined) && !(vm.merchant == null) &&
			// (vm.merchant != "")){
			// vm.searchModel.merchantId = vm.merchant.id;
			// }
			console.log("merchant " + vm.searchModel.merchant);
			if ((vm.fromDate != undefined) && !(vm.fromDate == null) && (vm.fromDate != "")) {
				vm.searchModel.fromPaymentDate = vm.fromDate.format('YYYY/MM/DD HH:mm');
			}
			console.log("from date " + vm.searchModel.fromPaymentDate);
			if ((vm.toDate != undefined) && !(vm.toDate == null) && (vm.toDate != "")) {
				vm.searchModel.toPaymentDate = vm.toDate.format('YYYY/MM/DD HH:mm');
			}

			if ((vm.searchModel.fromPaymentDate != undefined) && !(vm.searchModel.fromPaymentDate == null) && (vm.searchModel.fromPaymentDate != "") &&
				(vm.searchModel.toPaymentDate != undefined) && !(vm.searchModel.toPaymentDate == null) && (vm.searchModel.toPaymentDate != "")) {
				console.log("from + to date")
				if (vm.searchModel.fromPaymentDate > vm.searchModel.toPaymentDate) {
					console.log("from date is greater than to date");
					$('#fromTransactionDate').addClass('has-error');
					$('#toTransactionDate').addClass('has-error');
					$('#transactionDate_label').addClass('label-has-error');
					angular.element($document[0].querySelector('#fromTransactionDate')).addClass('has-error');
					angular.element($document[0].querySelector('#toTransactionDate')).addClass('has-error');
					angular.element($document[0].querySelector('#transactionDate_label')).addClass('label-has-error');
					// $rootScope.messageCenter.errorMessages = [];
					var errorMessages = [{ "message": "From date is greater than To date." }];

					for (var i = 0; i < errorMessages.length; i += 5) {
						$rootScope.messageCenter.errorMessages.push(errorMessages.slice(i, i + 5));
					}


					$("html,body").animate({ scrollTop: $("body").offset().top }, "slow");
					return;

				}
			}
			if ((vm.searchModel.ccNumber != undefined) && !(vm.searchModel.ccNumber == null) &&
				(vm.searchModel.achNumber != undefined) && !(vm.searchModel.achNumber == null)) {
				
				console.log("cc + ach number");
				
				$('#ccNumber').addClass('has-error');
				$('#achNumber').addClass('has-error');
				$('#ccNumber_label').addClass('label-has-error');
				$('#achNumber_label').addClass('label-has-error');
				
				angular.element($document[0].querySelector('#ccNumber')).addClass('has-error');
				angular.element($document[0].querySelector('#achNumber')).addClass('has-error');
				angular.element($document[0].querySelector('#ccNumber_label')).addClass('label-has-error');
				angular.element($document[0].querySelector('#achNumber_label')).addClass('label-has-error');

				// $rootScope.messageCenter.errorMessages = [];
				var errorMessages = [{ "message": "Enter either CC number or ACH number." }];
				console.log(errorMessages);

				for (var i = 0; i < errorMessages.length; i += 5) {
					$rootScope.messageCenter.errorMessages.push(errorMessages.slice(i, i + 5));
				}
				$("html,body").animate({ scrollTop: $("body").offset().top }, "slow");

				return;
			}


			console.log("Searching model object " + JSON.stringify(vm.searchModel));

			transactionService.search(JSON.stringify(vm.searchModel), "NAN", "NAN").success(
				function (data) {
					console.log(data);
					if (data.transactions) {
						var found = data.transactions;
						if (found && Array === found.constructor) {
							vm.transactionList = vm.transactionList.concat(found);

						} else {
							if ((found != undefined) || !(found == null))
								vm.transactionList.push(found);

						}
						vm.searchResultCount = data.searchResultSize;

						vm.lastFetchIndex += 100;

					} else {
						vm.transactionList = [];
						vm.searchResultCount = 0;
					}

					vm.watch = true;
					console.log("watch become true ");
					vm.showTransactionList = true;
				}
			);

		};

		
		vm.getExcelTransactions = function () {
			console.log("getting transactions Excel");
			transactionService.getExcelTransactions(vm.searchModel).success(function (data) {
				var fileName = "transactions.xlsx";
				var file = new Blob([data], { type: 'application/vnd.ms-excel' });
				var fileURL = window.URL.createObjectURL(file);
				var a = document.createElement("a");
				document.body.appendChild(a);
            	a.style = "display: none";
				a.href = fileURL;
                a.download = fileName;
                a.click();
				console.log("transactions excel URL " + fileURL);
				// $window.open(fileURL);
				
			});
		};
		vm.getPdfReceipt = function (transactionId) {
			console.log("getting payment receipt PDF");
			transactionService.getPdfReceipt(transactionId).success(function (data) {
				var file = new Blob([data], { type: 'application/pdf' });
				//var fileURL = window.URL.createObjectURL(file);
				console.log("payment receipt PDF URL " + fileURL);
				
				if ($window.navigator && $window.navigator.msSaveOrOpenBlob) {
					$window.navigator.msSaveOrOpenBlob(file);
				}
				else {
				    var fileURL = window.URL.createObjectURL(file);
				    $window.open(fileURL);
				}

				
				//$window.open(fileURL);
			});
		};
		vm.emailReceipt = function (transactionId) {
			console.log("sending email with receipt PDF");
			transactionService.sendReceiptEmail(transactionId).success(function (data) {


			});
		};
		vm.goToTransactionDetails = function (transaction) {
			console.log("goToTransactionDetails " + transaction.achRoutingNumber);
			transactionService.setTransactionHistory(transaction);
			transactionService.setBackSearchTransactionCriteria(vm.searchModel);
			transactionService.setBackFromDate(vm.fromDate);
			transactionService.setBackToDate(vm.toDate);
			transactionService.setBackTransactionList(vm.transactionList);
			transactionService.setBackCurrentPage($scope.pagination.current);
			$location.path("/transactionHistory");
		}

		vm.getTransactionDetails = function () {
			vm.transaction = transactionService.getTransactionHistory();
			var found = vm.transaction.items;
			vm.transaction.items = [];
			if (found && Array === found.constructor) {
				vm.transaction.items = vm.transaction.items.concat(found);

			} else {

				if ((found != undefined) || !(found == null)) {
					vm.transaction.items.push(found);
				}
			}
		}
		vm.backToAdmin = function () {
			$location.path("/transactionAdmin");
			console.log("back to admin");
			vm.searchModel = transactionService.getBackSearchTransactionCriteria();
			vm.fromDate = transactionService.getBackFromDate();
			vm.toDate = transactionService.getBackToDate();
			vm.transactionList = transactionService.getBackTransactionList();
			vm.showTransactionList = true;
			$scope.pagination.current = transactionService.getBackCurrentPage();
		}
		vm.goBackHome =function(){
			transactionService.clearSearchCriterias();			
			$location.path("/home");
			$("html,body").animate({ scrollTop: 0 }, "slow");
		}
	}

	angular.module("AZ_PORTAL").controller("LandingCtrl", LandingCtrl)
		.controller("HomeCtrl", HomeCtrl)
		.controller("PaymentCtrl", PaymentCtrl)
		.controller("ModalInstanceCtrl", ModalInstanceCtrl)
		.controller("MerchantAdminCtrl", MerchantAdminCtrl)
		.controller("TransactionHistoryCtrl", TransactionHistoryCtrl);
}