resources:
  containers:
  - container: dotnetcore_arm
    image: huangtingluo/azure-pipelines-agent-eng:arm
  
  - container: dotnetcore_centos6
    image: huangtingluo/azure-pipelines-agent-eng:centos6

stages:
- stage: Create_Release_Branch
  displayName: Create Release Branch
  jobs:
  ################################################################################
  - job: Create_Release_Branch
  ################################################################################
    displayName: Create Release Branch
    pool:
      vmImage: ubuntu-18.04

    steps:
    - checkout: self

    - script: |
        cd release
        npm install
        node createReleaseBranch.js $(version)
      env:
        EDITOR: cat
        PAT: $(GithubToken)
      displayName: Push release branch to GitHub

- stage: Build
  dependsOn: Create_Release_Branch
  jobs:
  ################################################################################
  - job: build_windows_agent_x64
  ################################################################################
    displayName: Windows Agent (x64)
    pool:
      vmImage: vs2017-win2016
    variables:
      layoutRoot: '_layout\win-x64'
    steps:

    # Steps template for windows platform
    - template: .vsts.template.windows.yml
      parameters:
        testLogTitle: 'Windows-x64'
    
    # Package .NET Core Windows dependency (VC++ Redistributable)
    - template: .azure-pipelines/package-vcredist.yml
      parameters:
        layoutRoot: ${{ variables.layoutRoot }}
        flavor: 'x64'

    # Signing steps
    - template: .azure-pipelines/signing.yml
      parameters:
        layoutRoot: ${{ variables.layoutRoot }}

    # Create agent package zip
    - script: dev.cmd package Release
      workingDirectory: src
      displayName: Package Release

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (Windows)
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

    # Verify all binaries are signed (generate report)
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-codesignvalidation.CodesignValidation@0
      displayName: 'Generate Codesign Report'
      inputs:
        path: '$(layoutRoot)'
    
    # Verify all binaries are signed (check report)
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
      displayName: 'Verify Codesign Report'
      inputs:
        CodesignValidation: true
        CodesignValidationBreakOn: WarningAbove
        ToolLogsNotFoundAction: Error

  ################################################################################
  - job: build_windows_agent_x86
  ################################################################################
    displayName: Windows Agent (x86)
    pool:
      name: buildDevs
      demands: 'Agent.OSArchitecture -equals X86'
    variables:
      layoutRoot: '_layout\win-x86'
    steps:

    # Steps template for windows platform
    - template: .vsts.template.windows.yml
      parameters:
        testLogTitle: 'Windows-x86'
    
    # Package .NET Core Windows dependency (VC++ Redistributable)
    - template: .azure-pipelines/package-vcredist.yml
      parameters:
        layoutRoot: ${{ variables.layoutRoot }}
        flavor: 'x86'

    # Signing steps
    - template: .azure-pipelines/signing.yml
      parameters:
        layoutRoot: ${{ variables.layoutRoot }}

    # Create agent package zip
    - script: dev.cmd package Release
      workingDirectory: src
      displayName: Package Release

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (Windows)
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

  ################################################################################
  - job: build_linux_agent_x64
  ################################################################################
    displayName: Linux Agent (x64)
    pool:
      vmImage: ubuntu-16.04
    steps:

    # Steps template for non-windows platform
    - template: .vsts.template.nonwindows.yml
      parameters:
        testLogTitle: 'Linux-x64'

    # Create agent package zip
    - script: ./dev.sh package Release
      workingDirectory: src
      displayName: Package Release    

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (Linux)    
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

  ################################################################################
  - job: build_linux_agent_arm
  ################################################################################
    displayName: Linux Agent (ARM)
    pool:
      name: buildDevs
      demands: 'Agent.OSArchitecture -equals ARM'
    container: dotnetcore_arm
    steps:

    # Steps template for non-windows platform
    - template: .vsts.template.nonwindows.yml
      parameters:
        testLogTitle: 'Linux-ARM'

    # Create agent package zip
    - script: ./dev.sh package Release
      workingDirectory: src
      displayName: Package Release    

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (Linux)    
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

  ################################################################################
  - job: build_rhel6_agent_x64
  ################################################################################
    displayName: RHEL6 Agent (x64)
    pool:
      vmImage: ubuntu-16.04
    container: dotnetcore_centos6
    steps:

    # Steps template for non-windows platform
    - template: .vsts.template.nonwindows.yml
      parameters:
        testLogTitle: 'RHEL-x64'

    # Create agent package zip
    - script: ./dev.sh package Release
      workingDirectory: src
      displayName: Package Release

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (RHEL6 x64)
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

  ################################################################################
  - job: build_osx_agent
  ################################################################################
    displayName: macOS Agent (x64)
    pool:
      vmImage: macOS-10.13
    steps:

    # Steps template for non-windows platform
    - template: .vsts.template.nonwindows.yml
      parameters:
        testLogTitle: 'macOS-x64'
    
    # Create agent package zip
    - script: ./dev.sh package Release
      workingDirectory: src
      displayName: Package Release    

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (OSX)    
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

- stage: Release
  dependsOn: Build
  jobs:
  ################################################################################
  - job: publish_agent_packages
  ################################################################################
    displayName: Publish Agents (Windows/Linux/OSX)
    pool:
      name: ProductionRMAgents
    steps:
    
    # Clean
    - checkout: self
      clean: true

    - script: |
        git config user.email "azure-pipelines-bot@microsoft.com"
        git config user.name "azure-pipelines-bot"
        git checkout -f origin/releases/$(version)
      displayName: Checkout release branch
      condition: ne(variables['version'], '')
    
    # Download all agent packages from all previous phases
    - task: DownloadBuildArtifacts@0
      displayName: Download Agent Packages
      inputs:
        artifactName: agent

    # Upload agent packages to Azure blob storage and refresh Azure CDN
    - powershell: |
        Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
        Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
        Enable-AzureRmAlias -Scope CurrentUser
        $uploadFiles = New-Object System.Collections.ArrayList
        $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
        $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
        Write-Host "##vso[task.setsecret]$certificateThumbprint"
        Write-Host "##vso[task.setsecret]$clientId"
        Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
        Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
        $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
        Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
          $executable = (Get-ChildItem "$(System.ArtifactsDirectory)/agent/$_")[0]
          $versionDir = $executable.Name.Trim('.zip').Trim('.tar.gz')
          $versionDir = $versionDir.SubString($versionDir.LastIndexOf('-') + 1)
          Write-Host "##vso[task.setvariable variable=ReleaseAgentVersion;]$versionDir"
          Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
          Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$_/$executable" -Blob "$versionDir/$executable" -Force
          $uploadFiles.Add("/agent/$versionDir/$executable")
        }
        Write-Host "Purge Azure CDN Cache"
        Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
        Write-Host "Force Refresh Azure CDN Cache"
        Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
      displayName: Upload to Azure Blob

    # Create agent release on Github
    - powershell: |
        Write-Host "Creating github release."
        $releaseNotes = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\releaseNote.md").Replace("<AGENT_VERSION>","$(ReleaseAgentVersion)")
        $releaseData = @{
          tag_name = "v$(ReleaseAgentVersion)";
          target_commitish = "$(Build.SourceVersion)";
          name = "v$(ReleaseAgentVersion)";
          body = $releaseNotes;
          draft = $false;
          prerelease = $true;
        }
        $releaseParams = @{
          Uri = "https://api.github.com/repos/Microsoft/azure-pipelines-agent/releases";
          Method = 'POST';
          Headers = @{
            Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
          }
          ContentType = 'application/json';
          Body = (ConvertTo-Json $releaseData -Compress)
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $releaseCreated = Invoke-RestMethod @releaseParams
        Write-Host $releaseCreated
        $releaseId = $releaseCreated.id
        $assets = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\assets.json").Replace("<AGENT_VERSION>","$(ReleaseAgentVersion)")
        $assetsParams = @{
          Uri = "https://uploads.github.com/repos/Microsoft/azure-pipelines-agent/releases/$releaseId/assets?name=assets.json"
          Method = 'POST';
          Headers = @{
            Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
          }
          ContentType = 'application/octet-stream';
          Body = [system.Text.Encoding]::UTF8.GetBytes($assets)
        }
        Invoke-RestMethod @assetsParams
      displayName: Create agent release on Github

- stage: CreatePRs
  dependsOn: Release
  jobs:
  ################################################################################
  - job: create_ado_prs
  ################################################################################
    displayName: Create PRs in AzureDevOps
    pool:
      vmImage: ubuntu-18.04

    steps:
    - checkout: self

    - bash: |
        set -x
        git checkout releases/$(version)
        cd release
        npm install
        ls
        node createAdoPrs.js $(version)
      displayName: Create PRs in AzureDevOps and AzureDevOps.ConfigChange
      condition: ne(variables['version'], '')
      env:
        USER: $(User)
        PAT: $(AdoPAT)
