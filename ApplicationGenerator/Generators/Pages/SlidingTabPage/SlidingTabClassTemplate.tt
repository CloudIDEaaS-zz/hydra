<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.List<SlidingTab>" name="SlidingTabs" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="System.Collections.Generic.List<ESModule>" name="Exports" #>
<#@ parameter type="System.Collections.Generic.List<IDeclarable>" name="Declarations" #>
<#@ parameter type="AbstraX.DataAnnotations.UILoadKind" name="UILoadKind" #>
<#@ parameter type="System.String" name="PageName" #>
<#@ parameter type="System.String" name="Authorize" #>
<#@ parameter type="System.Boolean" name="IsComponent" #>
<# 
    var pageName = this.PageName.ToCamelCase();
    var className = this.PageName + "Page";

    if (this.IsComponent)
    {
        var page = new Page(className, this.UILoadKind);

        this.Declarations.Add(page);
        this.Exports.Add(page);
    }
    else
    {
        var component = new Page(className, this.UILoadKind);

        this.Declarations.Add(component);
        this.Exports.Add(component);
    }

    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }
#>

<# if (!IsComponent)
   {
#>
@IonicPage()
<#
   }
#>
<# if (this.Authorize.Length > 0)
   {
#>
@Authorize("<#= this.Authorize #>")
<# 
   }
#>
@Component({
  selector: 'page-<#= pageName #>',
  templateUrl: '<#= pageName #>.html'
})
export class <#= className #> {
<# 
    foreach (var tab in this.SlidingTabs) 
    {
        this.WriteLine(2, "{0}Root : string = \"{1}\"", tab.Root.ToCamelCase(), tab.Root);
    }

    foreach (var tab in this.SlidingTabs)
    {
        var tabTitleVariable = tab.Title.RemoveText(" ").ToCamelCase() + "Title";

        this.WriteLine(2, "{0} : string = \" \"", tabTitleVariable);
    }
#>

  constructor(public navCtrl: NavController, public translateService: TranslateService) {
    translateService.get([<# 

    var builder = new StringBuilder();

    foreach (var tab in this.SlidingTabs)
    {
        builder.AppendWithLeadingIfLength(", ", tab.TranslationKey.SurroundWithQuotes());
    }

    this.Write(builder.ToString());

#>]).subscribe(values => {
<#

    foreach (var tab in this.SlidingTabs)
    {
        var tabTitleVariable = tab.Title.RemoveText(" ").ToCamelCase() + "Title";

        this.WriteLine(6, "this.{0} = values[\"{1}\"]", tabTitleVariable, tab.TranslationKey);
    }

#>
    });
  }
}
