// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Pages.LoginPage
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.DataAnnotations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class LoginPageTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 16 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
 
    var userNameField = this.IdentityFields.GetIdentityField(IdentityFieldKind.UserName);
    var userPasswordField = this.IdentityFields.GetIdentityField(IdentityFieldKind.PasswordHash);

            
            #line default
            #line hidden
            this.Write("<ion-header>\r\n\r\n  <ion-navbar>\r\n    <ion-title>{{ \'");
            
            #line 23 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.LoginTitleTranslationKey));
            
            #line default
            #line hidden
            this.Write("\' | translate }}</ion-title>\r\n  </ion-navbar>\r\n\r\n</ion-header>\r\n\r\n\r\n<ion-content>" +
                    "\r\n  <form (submit)=\"doLogin()\">\r\n    <ion-list>\r\n\r\n      <ion-item>\r\n        <io" +
                    "n-label fixed>{{ \'");
            
            #line 34 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(userNameField.TranslationKey));
            
            #line default
            #line hidden
            this.Write("\' | translate }}</ion-label>\r\n        <ion-input type=\"text\" [(ngModel)]=\"account" +
                    ".userName\" name=\"userName\"></ion-input>\r\n      </ion-item>\r\n      <ion-item>\r\n  " +
                    "      <ion-label fixed>{{ \'");
            
            #line 38 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(userPasswordField.TranslationKey));
            
            #line default
            #line hidden
            this.Write("\' | translate }}</ion-label>\r\n        <ion-input type=\"password\" [(ngModel)]=\"acc" +
                    "ount.password\" name=\"password\"></ion-input>\r\n      </ion-item>\r\n      <div paddi" +
                    "ng>\r\n        <button ion-button color=\"primary\" block>{{ \'");
            
            #line 42 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.LoginButtonTranslationKey));
            
            #line default
            #line hidden
            this.Write("\' | translate }}</button>\r\n      </div>\r\n    </ion-list>\r\n  </form>\r\n</ion-conten" +
                    "t>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Pages\LoginPage\LoginPageTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private global::System.Collections.Generic.List<IdentityField> _IdentityFieldsField;

/// <summary>
/// Access the IdentityFields parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<IdentityField> IdentityFields
{
    get
    {
        return this._IdentityFieldsField;
    }
}

private string _PageNameField;

/// <summary>
/// Access the PageName parameter of the template.
/// </summary>
private string PageName
{
    get
    {
        return this._PageNameField;
    }
}

private string _EntityNameField;

/// <summary>
/// Access the EntityName parameter of the template.
/// </summary>
private string EntityName
{
    get
    {
        return this._EntityNameField;
    }
}

private string _LoginTitleTranslationKeyField;

/// <summary>
/// Access the LoginTitleTranslationKey parameter of the template.
/// </summary>
private string LoginTitleTranslationKey
{
    get
    {
        return this._LoginTitleTranslationKeyField;
    }
}

private string _LoginButtonTranslationKeyField;

/// <summary>
/// Access the LoginButtonTranslationKey parameter of the template.
/// </summary>
private string LoginButtonTranslationKey
{
    get
    {
        return this._LoginButtonTranslationKeyField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool IdentityFieldsValueAcquired = false;
if (this.Session.ContainsKey("IdentityFields"))
{
    this._IdentityFieldsField = ((global::System.Collections.Generic.List<IdentityField>)(this.Session["IdentityFields"]));
    IdentityFieldsValueAcquired = true;
}
if ((IdentityFieldsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IdentityFields");
    if ((data != null))
    {
        this._IdentityFieldsField = ((global::System.Collections.Generic.List<IdentityField>)(data));
    }
}
bool PageNameValueAcquired = false;
if (this.Session.ContainsKey("PageName"))
{
    this._PageNameField = ((string)(this.Session["PageName"]));
    PageNameValueAcquired = true;
}
if ((PageNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PageName");
    if ((data != null))
    {
        this._PageNameField = ((string)(data));
    }
}
bool EntityNameValueAcquired = false;
if (this.Session.ContainsKey("EntityName"))
{
    this._EntityNameField = ((string)(this.Session["EntityName"]));
    EntityNameValueAcquired = true;
}
if ((EntityNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EntityName");
    if ((data != null))
    {
        this._EntityNameField = ((string)(data));
    }
}
bool LoginTitleTranslationKeyValueAcquired = false;
if (this.Session.ContainsKey("LoginTitleTranslationKey"))
{
    this._LoginTitleTranslationKeyField = ((string)(this.Session["LoginTitleTranslationKey"]));
    LoginTitleTranslationKeyValueAcquired = true;
}
if ((LoginTitleTranslationKeyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("LoginTitleTranslationKey");
    if ((data != null))
    {
        this._LoginTitleTranslationKeyField = ((string)(data));
    }
}
bool LoginButtonTranslationKeyValueAcquired = false;
if (this.Session.ContainsKey("LoginButtonTranslationKey"))
{
    this._LoginButtonTranslationKeyField = ((string)(this.Session["LoginButtonTranslationKey"]));
    LoginButtonTranslationKeyValueAcquired = true;
}
if ((LoginButtonTranslationKeyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("LoginButtonTranslationKey");
    if ((data != null))
    {
        this._LoginButtonTranslationKeyField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
