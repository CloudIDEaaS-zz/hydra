<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<AbstraX.Angular.Page>" name="Pages" #>
<#@ parameter type="System.String" name="AppName" #>
<#@ parameter type="System.String" name="IdentityProvider" #>
<#@ parameter type="System.String" name="InitApp" #>
import { Component, ViewChild, Injector, ComponentFactoryResolver, Input } from '@angular/core';
import { StatusBar } from '@ionic-native/status-bar';
import { SplashScreen } from '@ionic-native/splash-screen';
import { TranslateService } from '@ngx-translate/core';
import { Config, Nav, Platform, App, NavControllerBase, ViewController } from 'ionic-angular';
import { RootPage } from './pages';
import { UserProvider } from './providers/user.provider';
import { Settings } from './providers/settings/settings';
import { List, IEnumerable } from "linq-javascript"
import { Guid } from "guid-typescript";
<# 
    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }
#>
const queryString = require('query-string');

@Component({
  templateUrl: 'app.html'
})
export class <#= this.AppName #>App {
  @Input() window: Window;
  @ViewChild(Nav, {static: false}) nav: Nav;
  n : any;

  public static getRootPage() {

    let parms = queryString.parse(window.location.search);
    let rootPage: any;

    switch (parms.root) {

<#
    foreach (var page in this.Pages)
    {
        if (page.UILoadKind == UILoadKind.RootPage)
        {
#>
      default:
        rootPage = RootPage;
        break;
<#
        }
        else
        {
#>
      case "<#= page.Name #>":
        rootPage = <#= page.Name #>;
        break;
<#
        }
    }
#>
    }

    return rootPage;
  }

  GetRootPageInternal() {
    return <#= this.AppName #>App.getRootPage();
  }

  constructor(private injector:Injector, private app: App, private translate: TranslateService, platform: Platform, settings: Settings, private config: Config, private statusBar: StatusBar, private splashScreen: SplashScreen) {

    platform.ready().then(() => {

      // Okay, so the platform is ready and our plugins are available.
      // Here you can do any higher level native things you might need.
      this.statusBar.styleDefault();
      this.splashScreen.hide();

    });

    this.initApp(app);
    this.initTranslate();
  }

  initApp(app: App) {
<#  if (this.IdentityProvider != null)
    {
#>
<#= this.InitApp #>
<#
    }
#>
  }

  initTranslate() {
    // Set the default language for translation strings, and the current language.
    this.translate.setDefaultLang('en');
    const browserLang = this.translate.getBrowserLang();

    if (browserLang) {
      if (browserLang === 'zh') {
        const browserCultureLang = this.translate.getBrowserCultureLang();

        if (browserCultureLang.match(/-CN|CHS|Hans/i)) {
          this.translate.use('zh-cmn-Hans');
        } else if (browserCultureLang.match(/-TW|CHT|Hant/i)) {
          this.translate.use('zh-cmn-Hant');
        }
      } else {
        this.translate.use(this.translate.getBrowserLang());
      }
    } else {
      this.translate.use('en'); // Set your language here
    }
  }

  getAllModules() {
    return new Promise((resolve) => {
      const id = Guid.create().toString();
      window['webpackJsonp'](
        [],
        {[id]: function(module, exports, __webpack_require__) {
          resolve(__webpack_require__.c);
        }},
        [id]
      );
    });
  }
}
