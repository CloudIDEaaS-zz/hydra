// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.App
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.DataAnnotations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Client\App\InitApp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class InitApp : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n    let userProvider = this.injector.get(");
            
            #line 13 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Client\App\InitApp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IdentityProvider));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n    this.n = NavControllerBase.prototype[\"_viewTest\"];\r\n    NavControllerBa" +
                    "se.prototype[\"_viewTest\"] = (o, p, e) => {\r\n\r\n    return userProvider.canView(o," +
                    " p, e).then((b) => {\r\n\r\n        if (b) {\r\n        return Promise.resolve(this.n(" +
                    "o, p, e));\r\n        }\r\n        else {\r\n        return Promise.resolve(true);\r\n  " +
                    "      }\r\n    }).catch(() => {\r\n        return Promise.reject(\"Unauthorized view!" +
                    "\");\r\n    });\r\n    };\r\n\r\n    window[\'_getComponentByName\'] = (name: string, makeG" +
                    "lobal?: (string|boolean)): Promise<any> =>\r\n    this.getAllModules()\r\n    .then(" +
                    "(modules) => {\r\n      let moduleList = new List<Object>(Object.keys(modules).map" +
                    "(key => modules[key]));\r\n      let exports = moduleList.selectMany((m : any) => " +
                    "{\r\n        let exports = Object.keys(m.exports).map(key => m.exports[key]);\r\n   " +
                    "     let exportList = new List<Object>(exports);\r\n\r\n        return exportList;\r\n" +
                    "      });\r\n\r\n      let modulesWithName = exports.where((e : any) => {\r\n        i" +
                    "f (e !== null && typeof e == \"function\") {\r\n          let functionName = e.name;" +
                    "\r\n          if (functionName == name) {\r\n            return true;\r\n          }\r\n" +
                    "        }\r\n        return false;\r\n      });\r\n\r\n      if (modulesWithName.count()" +
                    " == 1) {\r\n        let module = modulesWithName.single();\r\n        return module;" +
                    "\r\n      }\r\n      else {\r\n\r\n        let count = modulesWithName.count();\r\n\r\n     " +
                    "   return Promise.reject(`Searching for module with name: \'${ name }\' turned up " +
                    "${ count } results when expecting 1.`)\r\n      }\r\n    })\r\n    .catch(e => {\r\n    " +
                    "  console.error(e);\r\n    });");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator\Generators\Client\App\InitApp.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _IdentityProviderField;

/// <summary>
/// Access the IdentityProvider parameter of the template.
/// </summary>
private string IdentityProvider
{
    get
    {
        return this._IdentityProviderField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool IdentityProviderValueAcquired = false;
if (this.Session.ContainsKey("IdentityProvider"))
{
    this._IdentityProviderField = ((string)(this.Session["IdentityProvider"]));
    IdentityProviderValueAcquired = true;
}
if ((IdentityProviderValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IdentityProvider");
    if ((data != null))
    {
        this._IdentityProviderField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
