<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ import namespace="AbstraX" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.String" name="ProviderName" #>
<#@ parameter type="System.String" name="Title" #>
<#@ parameter type="System.String" name="ConfigPathString" #>
<#@ parameter type="ApplicationGenerator.Data.NamingConvention" name="NamingConvention" #>
<#@ parameter type="System.String" name="RootNamespace" #>
<#@ parameter type="System.Collections.Generic.List<ServiceMethod>" name="ServiceMethods" #>
using AbstraX;
using HydraDevOps.Services.Providers;
using Microsoft.AspNetCore.Hosting;
using Newtonsoft.Json.Linq;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using Utils;
using System.Linq;
using System.Net.Http;
using System;
using ApplicationGenerator.Data.Interfaces;
using Microsoft.EntityFrameworkCore;
using HydraDevOps.Services.Models;
using ApplicationGenerator.Data;
using <#= this.RootNamespace #>.Services.Models.<#= this.Title #>Service;
using ApplicationGenerator.Services;

namespace <#= this.RootNamespace #>.Services.Providers.<#= this.Title #>Service
{
    public interface I<#= this.ProviderName #> : IWebApiProvider
    {
<# 
    foreach (var serviceMethod in this.ServiceMethods)
    {
        this.WriteLineSpaceIndent(8, serviceMethod.InterfaceSignature);
    }
#>
    }

    [WebApiProvider(typeof(I<#= this.ProviderName #>), typeof(<#= this.Title #>DataContext))]
    public class <#= this.ProviderName #> : I<#= this.ProviderName #>
    {
        private dynamic jsonConfigObject;
        private string urlBase;
        public Dictionary<string, string> ConfigVariables { get; }
        private IHandlebarsParser handlebarsParser;

        public AzureDevOpsServiceProvider(IWebHostEnvironment environment, IHandlebarsParser handlebarsParser)
        {
            var rootPath = environment.WebRootPath;
            var configFile = Path.Combine(rootPath, <#= this.ConfigPathString #>);

            this.ConfigVariables = new Dictionary<string, string>();
            this.handlebarsParser = handlebarsParser;

            using (var reader = new StreamReader(configFile))
            {
                this.jsonConfigObject = reader.ReadJson<object>();

                foreach (var pair in jsonConfigObject)
                {
                    this.ConfigVariables.Add(pair.Name, (string) pair.Value);
                }
            }

            urlBase = this.ConfigVariables["urlBase"];
        }

<#  
    foreach (var serviceMethod in this.ServiceMethods)
    {
#>
        <#= serviceMethod.MethodSignature #> 
        {
            var decodedId = id.FromBase64ToString();
            var variables = this.GetVariables(decodedId);
            var accessToken = variables["accessToken"];
            var authorizationKey = (":" + accessToken).ToBase64();
<# 
        foreach (var methodVariablePair in serviceMethod.MethodVariables)
        {
            this.WriteLineFormatSpaceIndent(12, "var {0} = {1};", methodVariablePair.Key, methodVariablePair.Value);
        }
#>

            using (var client = new HttpClient())
            {
                var resultPath = "<#= serviceMethod.ResultPath #>";  // comes from line 30 (resultPath) in json
                HttpRequestMessage request;
                JObject jObject = null;
                JArray jArray;
                string resultString;

                client.DefaultRequestHeaders.Add("Authorization", "Basic " + authorizationKey);

<#
        switch (serviceMethod.HttpMethod)
        {
            case "GET":
#>
                request = new HttpRequestMessage(new HttpMethod("GET"), uri);   // GET because of List ServiceMethodKind

                resultString = client.SendAsync(request).Result.Content.ReadAsStringAsync().Result;

                try
                {
                    jObject = JObject.Parse(resultString);
                }
                catch (Exception ex)
                {
                    throw new InvalidDataException("Invalid response: \r\n" + resultString);
                }

<#
                break;

            default:
                DebugUtils.Break();
                break;
        }
         
        switch (serviceMethod.ReturnType)
        {
            case "IEnumerable<dynamic>":
#>
                jArray = (JArray) jObject.SelectToken(resultPath);

                foreach (var obj in jArray)
                {
                    var jItemObject = (JObject)obj;
                    var itemId = <#= serviceMethod.UniqueIdFactory(new string[] { "decodedId", "jItemObject[\"id\"]" }) #>   // comes from line 47 (keyPattern) in json

                    jObject = (JObject)obj;

                    jObject.AddFirst(new JProperty("uniqueid", itemId.ToBase64()));
<#
                foreach (var returnPropertyPair in serviceMethod.ReturnProperties)
                {
#>
                    jObject.Add(new JProperty("<#= returnPropertyPair.Key #>", <#= returnPropertyPair.Value #>));
<#
                }
#>

                    yield return jObject.ToObject<dynamic>();
                }
            }
        }
<#
                break;

            default:
                DebugUtils.Break();
                break;

        }
    }
#>

        public IEnumerator CreateEntitySetEnumerator(DbContext context, string setName, string id)
        {
            var method = this.GetType().GetMethod("List" + setName);
            var results = (IEnumerable) method.Invoke(this, new object[] { id });

            return results.GetEnumerator();
        }

        public IEnumerator CreateNavigationPropertyEnumerator(DbContext context, string navigationProperty, string id)
        {
            var method = this.GetType().GetMethod("List" + navigationProperty);
            var results = (IEnumerable) method.Invoke(this, new object[] { id });

            return results.GetEnumerator();
        }

        public IEnumerator CreateCastEnumerator(DbContext context, string fromType, string toType, string id)
        {
            var method = this.GetType().GetMethod("Cast" + fromType + "To");
            var results = (IEnumerable) method.Invoke(this, new object[] { id, toType });

            return results.GetEnumerator();
        }

        public dynamic CreateNavigationPropertyObject(DbContext context, string navigationProperty, string id)
        {
            var method = this.GetType().GetMethod("Get" + navigationProperty);
            var dynamic = (IEnumerable) method.Invoke(this, new object[] { id });

            return dynamic;
        }

        public string GetIdBase()
        {
            return this.ConfigVariables["idBase"];
        }

        public NamingConvention GetNamingConvention()
        {
            return NamingConvention.<#= this.NamingConvention.ToString() #>;   // comes from line 5 (namingConvention) in json
        }
    }
}