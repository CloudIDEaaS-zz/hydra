<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@assembly name="C:\Program Files (x86)\Microsoft SDKs\RIA Services\v1.0\Libraries\Silverlight\System.ServiceModel.DomainServices.Client.dll" #>
<#@assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0\System.Windows.dll" #>
<#@assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.ComponentModel.DataAnnotations.dll" #>
<#@assembly name="C:\Program Files (x86)\Microsoft SDKs\RIA Services\v1.0\Libraries\Server\System.ServiceModel.DomainServices.Hosting.dll" #>
<#@assembly name="C:\Program Files (x86)\Microsoft SDKs\RIA Services\v1.0\Libraries\Server\System.ServiceModel.DomainServices.Server.dll" #>
<#@import namespace="AbstraX.ServerInterfaces" #>
<#@import namespace="System" #>
<#@import namespace="System.Reflection" #>
<#@import namespace="System.Collections" #>
<#@import namespace="System.Collections.Generic" #>
<#@import namespace="AbstraX.TypeMappings" #>
<#@import namespace="System.Linq" #>
<#@import namespace="Utils" #>
<#@import namespace="System.ComponentModel.DataAnnotations" #>
<#@import namespace="System.ServiceModel.DomainServices.Hosting" #> 
<#@import namespace="System.ServiceModel.DomainServices.Server" #>
<#@parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Type" name="BaseType" #>
<#
	var varName = BaseType.Name.Substring(0, 1).ToLower() + BaseType.Name.Substring(1, BaseType.Name.Length - 1);
    var providerType = GetProvider(BaseType);
	var nodeType = GetNodeType(BaseType);
    var methodinfo= BaseType.GetMethod("LoadExtension");
    var abstraXExtensionAttribute = (AbstraXExtensionAttribute) methodinfo.GetCustomAttributes(true).Cast<Attribute>().Where(a => a is AbstraXExtensionAttribute).FirstOrDefault();
    
	if (nodeType == null)
	{
		return null;
	}

	var interfaceName = Enum.GetName(typeof(NodeType), nodeType);
#>

namespace <#= BaseType.Namespace #>.Client
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Collections;
	using System.Linq;
	using System.Diagnostics;
	using System.ServiceModel.DomainServices;
	using System.ServiceModel.DomainServices.Client;
	using System.ServiceModel.DomainServices.Client.ApplicationServices;
	using AbstraX.ClientInterfaces;
	using System.Xml.Schema;
	using AbstraX.Bindings;
	using AbstraX.TypeMappings;
    using AbstraX;
    using MvvmTreeView;
    using Microsoft.Practices.Unity;
    using AbstraX.Contracts;
    using AbstraX.Contracts.ComponentModel;
    using System.Reflection;
    using System.Linq.Expressions;
    using System.Linq.Dynamic;
	using <#= BaseType.Namespace #>;

	[DebuggerDisplay("{ DebugInfo }")]
	public class <#= BaseType.Name #> : I<#= interfaceName #>
	{
		private <#= BaseType.FullName #> <#= varName #>;
		private IBase parent;
        private bool isChildrenLoaded;
		private <#= providerType.Name.Replace("Service", "Context") #> context;
        public event ChildrenLoadedHandler ChildrenLoaded;
<#
	if (nodeType == NodeType.Root)
	{
#>
		public <#= BaseType.Name #>(<#= BaseType.FullName #> <#= varName #>)
		{
			this.<#= varName #> = <#= varName #>;
<#
		if (abstraXExtensionAttribute != null)
		{
#>
           ProviderClientManager.Container.RegisterType<<#= abstraXExtensionAttribute.InterfaceName #>, <#= abstraXExtensionAttribute.ImplementationName #>>();
<#
		}
#>
		}

        public ItemGenerationOperation<T> GenerateItemFromID<T>(string id) where T : IBase
        {
            var itemGenerationOperation = new ItemGenerationOperation<T>();
            var invokeOperation = context.GetQueryMethodForID(id);

            invokeOperation.Completed += (sender, e) =>
            {
                var methodName = invokeOperation.Value;
                var methodInfo = context.GetType().GetMethods().Single(m => m.Name == methodName + "Query");
                var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();
                var query = (EntityQuery) methodInfo.Invoke(context, new object[] { });
                var loadMethod = context.GetType().GetMethods().AsQueryable().Cast<MethodInfo>().FirstOrDefault(m => m.Name == "Load");
                var isComposable = query.IsComposable;
                LoadOperation loadOperation;

                itemGenerationOperation.SetProgress(.5f);

                if (query.IsComposable)
                {
                    var whereMethod = typeof(DynamicQueryable).GetMethods(BindingFlags.Static | BindingFlags.Public).Where(mi => mi.Name == "Where" && mi.ReturnType.Name == "EntityQuery`1").Single();
                    var idParm = string.Format("id=\"{0}\"", id);

                    whereMethod = whereMethod.MakeGenericMethod(typeParm);

                    query = (EntityQuery)whereMethod.Invoke(query, new object[] { query, idParm, new object[0] });
                    whereMethod = null;

                    var loadGenericMethod = loadMethod.MakeGenericMethod(new Type[] { typeParm });

                    loadOperation = (LoadOperation)loadGenericMethod.Invoke(context, new object[] { query });
                }
                else
                {
                    var loadGenericMethod = loadMethod.MakeGenericMethod(new Type[] { typeParm });

                    loadOperation = (LoadOperation)loadGenericMethod.Invoke(context, new object[] { query });
                }

                loadOperation.Completed += (sender2, e2) =>
                {
                    var entity = loadOperation.Entities.Single();
                    var constructor = (ConstructorInfo) null;
                    var objectType = this.GetType().Assembly.GetTypes().Single(t => 
                    {
                        var constructors = t.GetConstructors();

                        if (constructors.Length > 0)
                        {
                            if (isComposable)
                            {
                                constructors = constructors.Where(c => c.GetParameters().Length == 2).ToArray();

                                var constructor2 = constructors.ToList().SingleOrDefault(c =>
                                {
                                    var entityType = entity.GetType();
                                    var parmType1 = c.GetParameters().ElementAt(0).ParameterType;
                                    var parmType2 = c.GetParameters().ElementAt(1).ParameterType;

                                    return t.Name == entityType.Name && parmType1.FullName == entityType.FullName && parmType2.Name == "<#= providerType.Name.Replace("Service", "Context") #>";
                                });

                                if (constructor2 != null)
                                {
                                    constructor = constructor2;
                                    return true;
                                }
                            }
                            else
                            {
                                constructors = constructors.Where(c => c.GetParameters().Length == 1).ToArray();

                                var constructor2 = constructors.ToList().SingleOrDefault(c =>
                                {
                                    var entityType = entity.GetType();
                                    var parmType1 = c.GetParameters().ElementAt(0).ParameterType;

                                    return t.Name == entityType.Name && parmType1.FullName == entityType.FullName;
                                });

                                if (constructor2 != null)
                                {
                                    constructor = constructor2;
                                    return true;
                                }
                            }
                        }

                        return false;
                    });

                    if (isComposable)
                    {
                        var baseObject = constructor.Invoke(new object[] { entity, context });

                        itemGenerationOperation.SetProgress(1f);

                        itemGenerationOperation.SetGenerated(this, (T)baseObject);
                    }
                    else
                    {
                        var baseObject = constructor.Invoke(new object[] { entity });

                        itemGenerationOperation.SetProgress(1f);

                        itemGenerationOperation.SetGenerated(this, (T)baseObject);
                    }
                };
            };

            return itemGenerationOperation;
        }
<#
	}
	else
	{
#>

		public <#= BaseType.Name #>(<#= BaseType.FullName #> <#= varName #>, IBase parent)
		{
			this.<#= varName #> = <#= varName #>;
			this.parent = parent;
			this.context = (<#= providerType.Name.Replace("Service", "Context") #>) parent.Context;
		}

		public <#= BaseType.Name #>(<#= BaseType.FullName #> <#= varName #>, <#= providerType.Name.Replace("Service", "Context") #> context)
		{
			this.<#= varName #> = <#= varName #>;
			this.context = context;
		}

<#
	}

#>
        public bool IsChildrenLoaded
        {
            get
            {
                if (!<#= varName #>.HasChildren)
                {
                    return true;
                }
                else
                {
                    return isChildrenLoaded;
                }
            }
        } 

        public IAbstraXExtension LoadExtension(IBase baseObject)
        {
<#
		if (abstraXExtensionAttribute != null)
		{
#>
            var extension = ProviderClientManager.Container.Resolve<<#= abstraXExtensionAttribute.InterfaceName #>>();

			extension.Initialize(baseObject);

			return extension;
<#
		}
		else
		{
#>
			return null;
<#
		}
#>
        }

        public IAbstraXExtension LoadExtension(IBase baseObject, ITreeNode treeNode)
        {
<#
		if (abstraXExtensionAttribute != null)
		{
#>
            var extension = ProviderClientManager.Container.Resolve<<#= abstraXExtensionAttribute.InterfaceName #>>();

			extension.Initialize(baseObject, treeNode);

			return extension;
<#
		}
		else
		{
#>
			return null;
<#
		}
#>
        }

		public DomainContext Context
		{
			get
			{
				return context;
			}

			set
			{
				context = (<#= providerType.Name.Replace("Service", "Context") #>) value;
			}
		}
<#
    var elementTypes = GetElementTypes(BaseType);
    var attributeTypes = GetAttributeTypes(BaseType);
    var operationTypes = GetOperationTypes(BaseType);
    var elementProperties = new Dictionary<PropertyInfo, System.Type>();
    var attributeProperties = new Dictionary<PropertyInfo, System.Type>();
    var operationProperties = new Dictionary<PropertyInfo, System.Type>();

	if (nodeType != null)
	{
        foreach (var property in BaseType.GetProperties())
        {
            // todo - support other collection types

            if (property.PropertyType.Name == "List`1" && property.PropertyType.IsGenericType)
            {
                var argType = property.PropertyType.GetGenericArguments()[0];

                if (elementTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        elementProperties.Add(property, argType);
                    }
                }
                else if (attributeTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        attributeProperties.Add(property, argType);
                    }
                }
                else if (operationTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        operationProperties.Add(property, argType);
                    }
                }
            }
        }

		foreach (var property in BaseType.GetProperties())
		{
            string propertyType;

            if (!property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is ExcludeAttribute))
            {
				if (property.PropertyType.IsGenericType) 
				{
					var args = String.Join<string>(", ",  property.PropertyType.GetGenericArguments().AsEnumerable().Select(a => a.Name).ToArray<string>());

					propertyType = property.PropertyType.Name;
					propertyType = propertyType.Substring(0, propertyType.IndexOf('`'));

					if (propertyType == "List")
					{
						propertyType = "EntityCollection";
					}

					if (args.StartsWith("I"))
					{
						propertyType = propertyType + "<" + args + ">";
					}
					else if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is ReturnsExternalAttribute))
					{
                        var returnsExternal = (ReturnsExternalAttribute) property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Single(a => a is ReturnsExternalAttribute);

						propertyType = propertyType + "<" + returnsExternal.Type.Namespace + "." + args + ">";
					}
					else
					{
						propertyType = propertyType + "<" + BaseType.Namespace + "." + args + ">";
					}
				}
				else
				{
					propertyType = property.PropertyType.Name;
				}

				if (property.Name == "ProviderType")
				{
	#>			
		public <#= propertyType #> <#= property.Name #>
		{
			get
			{
				return (ProviderType)<#= varName #>.<#= property.Name #>;
			}
		}
	<#
				}
			    else if (property.Name == "Root")
			    {
    #>			
        public IRoot Root
        {
            get 
            {
                IBase baseObject = this;

                while (baseObject != null)
                {
                    baseObject = baseObject.Parent;

                    if (baseObject is IRoot)
                    {
                        return (IRoot) baseObject;
                    }
                }

                return null;
            }
        }
    <#
			    }
				else if (property.Name == "ParentFieldName")
				{
	#>			
		public string ParentFieldName
		{
			get { throw new NotImplementedException(); }
		}
	<#
				}
				else if (property.Name == "Kind")
				{
	#>			
		public <#= propertyType #> <#= property.Name #>
		{
			get
			{
				return (DefinitionKind)<#= varName #>.<#= property.Name #>;
			}
		}
	<#
				}
				else if (property.Name == "Modifiers")
				{
	#>			
		public <#= propertyType #> <#= property.Name #>
		{
			get
			{
				return (Modifiers)(int)<#= varName #>.<#= property.Name #>;
			}
		}
	<#
				}
				else if (property.Name == "ReturnType")
                {
	#>			
		public IType <#= property.Name #>
		{
			get
			{
				if (<#= varName #>.<#= property.Name #> == null)
				{
					return null;
				}
				else
				{
					return new BaseType
					{
						Name = <#= varName #>.<#= property.Name #>.Name,
						FullyQualifiedName = <#= varName #>.<#= property.Name #>.FullyQualifiedName,
						IsCollectionType = <#= varName #>.<#= property.Name #>.IsCollectionType,
						SuggestedNamespace = <#= varName #>.<#= property.Name #>.SuggestedNamespace
					};
				}
			}
		}
	<#
                }
				else if (property.Name == "DataType")
				{
					if (nodeType == NodeType.Attribute)
					{
	#>			
		public IScalarType <#= property.Name #>
		{
			get
			{
				if (<#= varName #>.<#= property.Name #> == null)
				{
					return null;
				}
				else
				{
					return new ScalarType
					{
						Name = <#= varName #>.<#= property.Name #>.Name,
						TypeCode = (XmlTypeCode) <#= varName #>.<#= property.Name #>.TypeCode,
						FullyQualifiedName = <#= varName #>.<#= property.Name #>.FullyQualifiedName,
						IsCollectionType =  <#= varName #>.<#= property.Name #>.IsCollectionType
					};
				}
			}
		}
	<#
					}
					else
					{
	#>			
		public IType <#= property.Name #>
		{
			get
			{
				if (<#= varName #>.<#= property.Name #> == null)
				{
					return null;
				}
				else
				{
					return new BaseType
					{
						Name = <#= varName #>.<#= property.Name #>.Name,
						FullyQualifiedName = <#= varName #>.<#= property.Name #>.FullyQualifiedName,
						IsCollectionType = <#= varName #>.<#= property.Name #>.IsCollectionType,
						SuggestedNamespace = <#= varName #>.<#= property.Name #>.SuggestedNamespace
					};
				}
			}
		}
	<#
					}
				}
				else if (property.Name == "Direction")
				{
	#>			
		public OperationDirection <#= property.Name #>
		{
			get
			{
				return (OperationDirection) <#= varName #>.<#= property.Name #>;
			}
		}
	<#
				}
				else if (property.Name == "Parent")
				{
	#>			
		public IBase <#= property.Name #>
		{
			get
			{
				return parent;
			}
		}
	<#
				}
				else if (property.Name == "Facets")
				{
	#>			
        public Facet[] Facets
        {
            get
            {
                Facet[] facets = new Facet[<#= varName #>.Facets.Count];
                var index = 0;
                var arguments = new List<Argument>();

                foreach (var facet in <#= varName #>.Facets)
                {
                    facets[index] = new Facet
                    {
                        FacetType = new BaseType
					    {
						    Name = facet.FacetType.Name,
						    FullyQualifiedName = facet.FacetType.FullyQualifiedName,
						    IsCollectionType =  facet.FacetType.IsCollectionType
					    },

                        Arguments = arguments.Where(notused => { facet.Arguments.ToList().ForEach(a => arguments.Add(new Argument() { Parameter = a.ID, Value = a.Value })); return true; }).ToList<Argument>()
                    };

                    index++;
                }

                return facets;
            } 
        }
	<#
				}
				else if (property.Name != "RootElements" && property.Name != "ChildElements" && property.Name != "Attributes" && property.Name != "Operations" && property.Name != "Constructor" && property.Name != "Method" && property.Name != "AllowableContructTypes" && property.Name != "AllowableContainerTypes")
				{
	#>			
		public <#= propertyType #> <#= property.Name #>
		{
			get
			{
				return <#= varName #>.<#= property.Name #>;
			}
		}

	<#
				}
			}
		}
		
        foreach (var property in BaseType.GetProperties())
        {
            if (property.Name == "RootElements" || property.Name == "ChildElements")
            {
#>			
		public IEnumerable<IElement> <#= property.Name #>
		{
			get
			{
<#
				if (elementProperties.Count > 0)
				{
					foreach (var elemType in elementProperties)
					{
#>
				foreach (<#= BaseType.Namespace #>.<#= elemType.Value.Name #> element in this.<#= elemType.Key.Name #>)
				{
					yield return (IElement) new <#= BaseType.Namespace #>.Client.<#= elemType.Value.Name #>(element, this);
				} 
<#
					}
				}
				else
				{
#>
				return null;
<#
				}
#>
			}
		}
<#
			}
			else if (property.Name == "Attributes")
            {
#>			
		public IEnumerable<IAttribute> Attributes
		{
			get
			{
<#
				if (attributeProperties.Count > 0)
				{
					foreach (var attributeType in attributeProperties)
					{
#>
				foreach (<#= BaseType.Namespace #>.<#= attributeType.Value.Name #> element in this.<#= attributeType.Key.Name #>)
				{
					yield return (IAttribute) new <#= BaseType.Namespace #>.Client.<#= attributeType.Value.Name #>(element, this);
				} 
<#
					}
				}
				else
				{
#>
				return null;
<#
				}
#>
			}
		}
<#
			}
            if (property.Name == "Operations")
            {
                DebugCallback(BaseType, new EventArgs<Type>(BaseType));
#>			
		public IEnumerable<IOperation> Operations
		{
			get
			{
<#
				if (operationProperties.Count > 0)
				{
					foreach (var operationType in operationProperties)
					{
                        var returnsEntitiesAttribute = (ReturnsEntitiesAttribute) operationType.Key.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().SingleOrDefault(a => a is ReturnsEntitiesAttribute);

                        if (returnsEntitiesAttribute != null)
                        {
#>
				foreach (<#= BaseType.Namespace #>.<#= operationType.Value.Name #> operation in this.<#= operationType.Key.Name #>)
				{
<#
                            foreach (var entityType in returnsEntitiesAttribute.EntityTypes)
                            {
#>
				    if (operation is <#= BaseType.Namespace #>.<#= entityType.Name #>)
                    {
					    yield return (IOperation) new <#= BaseType.Namespace #>.Client.<#= entityType.Name #>((<#= BaseType.Namespace #>.<#= entityType.Name #>) operation, this);
                    }           
<#
                            }
#>
				}
<#
                        }
                        else
                        {
#>
				foreach (<#= BaseType.Namespace #>.<#= operationType.Value.Name #> operation in this.<#= operationType.Key.Name #>)
				{
					yield return (IOperation) new <#= BaseType.Namespace #>.Client.<#= operationType.Value.Name #>(operation, this);
				} 
<#
                        }
					}
				}
				else
				{
#>
				return null;
<#
				}
#>
			}
		}
<#
			}
        }
#>

		public void LoadChildren()
		{
<#
		if (elementProperties.Count > 0)
		{
			foreach (var elemType in elementProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == elemType.Value.Name && methodInfo.Name.EndsWith(BaseType.Name))
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);
#>
            var <#= varQueryName #>Query = context.<#= methodInfo.Name #>Query(this.ID);

            var <#= varQueryName #>LoadOp = context.Load(<#= varQueryName #>Query, (result) =>
            {
				if (ChildrenLoaded != null)
				{
                    isChildrenLoaded = true;
					ChildrenLoaded(this);
				}
            }
            , null);

<#
							break;
						}
                    }
                }
			}
		}

		if (attributeProperties.Count > 0)
		{
			foreach (var attributeType in attributeProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == attributeType.Value.Name)
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);
#>
            var <#= varQueryName #>Query = context.<#= methodInfo.Name #>Query(this.ID);

            var <#= varQueryName #>LoadOp = context.Load(<#= varQueryName #>Query, (result) =>
            {
				if (ChildrenLoaded != null)
				{
					ChildrenLoaded(this);
				}
            }
            , null);

<#
							break;
						}
                    }
                }
			}
		}

		if (operationProperties.Count > 0)
		{
			foreach (var operationType in operationProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == operationType.Value.Name)
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);
#>
            var <#= varQueryName #>Query = context.<#= methodInfo.Name #>Query(this.ID);

            var <#= varQueryName #>LoadOp = context.Load(<#= varQueryName #>Query, (result) =>
            {
				if (ChildrenLoaded != null)
				{
					ChildrenLoaded(this);
				}
            }
            , null);
<#
							break;
						}
                    }
                }
			}
		}
#>
		}

        public void AddView(Hydra.Shell.Interfaces.IDocumentView view)
        {
            throw new NotImplementedException();
        }

        public void CloseView(Hydra.Shell.Interfaces.IDocumentView view)
        {
            throw new NotImplementedException();
        }

        public void CloseAllViews()
        {
            throw new NotImplementedException();
        }

        public void UpdateAllViews()
        {
            throw new NotImplementedException();
        }
<#
	}
#>
	}
}	

<#+ 
    public Type GetProvider(System.Type BaseType)
    {
        foreach (var type in BaseType.Assembly.GetTypes())
        {
            if (type.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is EnableClientAccessAttribute))
            {
                return type;
            }
        }

        return null;
    }

	public NodeType? GetNodeType(System.Type BaseType)
	{
		foreach (var interfaceType in BaseType.GetInterfaces())
		{
			if (interfaceType.Name == "IRoot")
			{
				return NodeType.Root;
			}
			else if (interfaceType.Name == "IElement")
			{
				return NodeType.Element;
			}
			else if (interfaceType.Name == "IAttribute")
			{
				return NodeType.Attribute;
			}
			else if (interfaceType.Name == "IOperation")
			{
				return NodeType.Operation;
			}
		}

		return null;
	}

    public List<System.Type> GetElementTypes(System.Type BaseType)
    {
		var elementTypes = new List<System.Type>();

		foreach (var type in BaseType.Assembly.GetTypes())
		{
			foreach (System.Type interfaceType in type.GetInterfaces())
			{
				if (interfaceType.Name == "IElement")
				{
					elementTypes.Add(type);
				}
			}
		}

        if (BaseType.BaseType != null)
        {
            AddElementTypes(BaseType.BaseType, elementTypes);
        }

        return elementTypes;
    }

    public void AddElementTypes(System.Type BaseType, List<System.Type> elementTypes)
    {
        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IElement")
                {
                    elementTypes.Add(type);
                }
            }
        }

        if (BaseType.BaseType != null)
        {
            AddElementTypes(BaseType.BaseType, elementTypes);
        }
    }

    public List<System.Type> GetAttributeTypes(System.Type BaseType)
    {
        List<System.Type> attributeTypes = new List<System.Type>();

        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IAttribute")
                {
                    attributeTypes.Add(type);
                }
            }
        }

        if (BaseType.BaseType != null)
        {
            AddAttributeTypes(BaseType.BaseType, attributeTypes);
        }

        return attributeTypes;
    }

    public void AddAttributeTypes(System.Type BaseType, List<System.Type> attributeTypes)
    {
        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IAttribute")
                {
                    attributeTypes.Add(type);
                }
            }
        }

        if (BaseType.BaseType != null)
        {
            AddAttributeTypes(BaseType.BaseType, attributeTypes);
        }
    }

    public List<System.Type> GetOperationTypes(System.Type BaseType)
    {
        List<System.Type> operationTypes = new List<System.Type>();

        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IOperation")
                {
                    operationTypes.Add(type);
                }
            }
        }

        if (BaseType.BaseType != null)
        {
            AddOperationTypes(BaseType.BaseType, operationTypes);
        }

        return operationTypes;
    }

    public void AddOperationTypes(System.Type BaseType, List<System.Type> operationTypes)
    {
        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IOperation")
                {
                    operationTypes.Add(type);
                }
            }
        }

        if (BaseType.BaseType != null)
        {
            AddOperationTypes(BaseType.BaseType, operationTypes);
        }
    }
#>
