// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Templates
{
    using AbstraX.ServerInterfaces;
    using System;
    using System.Reflection;
    using System.Collections;
    using System.Collections.Generic;
    using AbstraX.TypeMappings;
    using System.Linq;
    using System.ComponentModel.DataAnnotations;
    using System.ServiceModel.DomainServices.Hosting;
    using System.ServiceModel.DomainServices.Server;
    
    
    #line 1 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class AbstraXClientInterfaceGeneratorTestRun : AbstraXClientInterfaceGeneratorBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write(" \r\n");
            
            #line 21 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

    var varName = BaseType.Name.Substring(0, 1).ToLower() + BaseType.Name.Substring(1, BaseType.Name.Length - 1);
    var providerType = GetProvider(BaseType);
	var nodeType = GetNodeType(BaseType);
    var methodinfo= BaseType.GetMethod("LoadExtension");

		// var should go above this block

    var abstraXExtensionAttribute = (AbstraXExtensionAttribute) methodinfo.GetCustomAttributes(true).Cast<Attribute>().Where(a => a is AbstraXExtensionAttribute).FirstOrDefault();
	
	if (nodeType == null)
	{
		return null;
	}

	var interfaceName = Enum.GetName(typeof(NodeType), nodeType);
  

            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 40 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(@".Client
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Collections;
	using System.Linq;
	using System.Diagnostics;
	using System.ServiceModel.DomainServices;
	using System.ServiceModel.DomainServices.Client;
	using System.ServiceModel.DomainServices.Client.ApplicationServices;
	using AbstraX.ClientInterfaces;
	using System.Xml.Schema;
	using AbstraX.Bindings;
	using AbstraX.TypeMappings;
    using AbstraX;
    using MvvmTreeView;
    using Microsoft.Practices.Unity;
    using AbstraX.Contracts;
    using AbstraX;
    using Microsoft.Practices.Unity;
	using ");
            
            #line 62 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t[DebuggerDisplay(\"{ DebugInfo }\")]\r\n\tpublic class ");
            
            #line 65 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Name));
            
            #line default
            #line hidden
            this.Write(" : I");
            
            #line 65 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interfaceName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\tprivate ");
            
            #line 67 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.FullName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 67 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\tprivate IBase parent;\r\n\t\tprivate ");
            
            #line 69 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(providerType.Name.Replace("Service", "Context")));
            
            #line default
            #line hidden
            this.Write(" context;\r\n        public event ChildrenLoadedHandler ChildrenLoaded;\r\n\r\n");
            
            #line 72 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

    DebugCallback(this, new EventArgs());

	if (nodeType == NodeType.Root)
	{

            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 78 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 78 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.FullName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 78 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tthis.");
            
            #line 80 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 80 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 82 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

            if (abstraXExtensionAttribute != null)
            {
 
            
            #line default
            #line hidden
            this.Write("\t\t\t    IoC.RegisterType<");
            
            #line 86 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(abstraXExtensionAttribute.InterfaceName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 86 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(abstraXExtensionAttribute.ImplementationName));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 87 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

            }

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 91 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

	}
	else
	{

            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 96 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 96 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.FullName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 96 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(", IBase parent)\r\n\t\t{\r\n\t\t\tthis.");
            
            #line 98 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 98 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\tthis.parent = parent;\r\n\t\t\tthis.context = (");
            
            #line 100 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(providerType.Name.Replace("Service", "Context")));
            
            #line default
            #line hidden
            this.Write(") parent.Context;\r\n\t\t}\r\n");
            
            #line 102 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

	}


            
            #line default
            #line hidden
            this.Write("\r\n        public IAbstraXExtension LoadExtension(IBase baseObject, ITreeNode tree" +
                    "Node)\r\n        {\r\n");
            
            #line 109 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

            if (abstraXExtensionAttribute != null)
            {

            
            #line default
            #line hidden
            this.Write("\t\t\treturn IoC.Resolve<");
            
            #line 113 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(abstraXExtensionAttribute.InterfaceName));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 114 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("            return null;\r\n");
            
            #line 120 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

            }

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n\t\tpublic DomainContext Context\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn contex" +
                    "t;\r\n\t\t\t}\r\n\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\tcontext = (");
            
            #line 134 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(providerType.Name.Replace("Service", "Context")));
            
            #line default
            #line hidden
            this.Write(") value;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 137 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

    var nodeTypes = GetNodeTypes(BaseType);
    var attributeTypes = GetAttributeTypes(BaseType);
    var operationTypes = GetOperationTypes(BaseType);
    var elementProperties = new Dictionary<PropertyInfo, System.Type>();
    var attributeProperties = new Dictionary<PropertyInfo, System.Type>();
    var operationProperties = new Dictionary<PropertyInfo, System.Type>();

	if (nodeType != null)
	{
        foreach (var property in BaseType.GetProperties())
        {
            // todo - support other collection types

            if (property.PropertyType.Name == "List`1" && property.PropertyType.IsGenericType)
            {
                var argType = property.PropertyType.GetGenericArguments()[0];

                if (nodeTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        elementProperties.Add(property, argType);
                    }
                }
                else if (attributeTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        attributeProperties.Add(property, argType);
                    }
                }
                else if (operationTypes.AsEnumerable().Any(e => e.Name == argType.Name))
                {
                    if (property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is AssociationAttribute))
                    {
                        operationProperties.Add(property, argType);
                    }
                }
            }
        }

		foreach (var property in BaseType.GetProperties())
		{
            string propertyType;

            if (!property.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is ExcludeAttribute))
            {
				if (property.PropertyType.IsGenericType) 
				{
					var args = String.Join<string>(", ",  property.PropertyType.GetGenericArguments().AsEnumerable().Select(a => a.Name).ToArray<string>());

					propertyType = property.PropertyType.Name;
					propertyType = propertyType.Substring(0, propertyType.IndexOf('`'));

					if (propertyType == "List")
					{
						propertyType = "EntityCollection";
					}

					if (args.StartsWith("I"))
					{
						propertyType = propertyType + "<" + args + ">";
					}
					else
					{
						propertyType = propertyType + "<" + BaseType.Namespace + "." + args + ">";
					}
				}
				else
				{
					propertyType = property.PropertyType.Name;
				}


				if (property.Name == "ProviderType")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic ");
            
            #line 215 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 215 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn (ProviderType)");
            
            #line 219 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 219 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 222 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
			    else if (property.Name == "Root")
			    {
    
            
            #line default
            #line hidden
            this.Write(@"			
        public IRoot Root
        {
            get 
            {
                IBase baseObject = this;

                while (baseObject != null)
                {
                    baseObject = baseObject.Parent;

                    if (baseObject is IRoot)
                    {
                        return (IRoot) baseObject;
                    }
                }

                return null;
            }
        }
    ");
            
            #line 246 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

			    }
				else if (property.Name == "ParentFieldName")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic string ParentFieldName\r\n\t\t{\r\n\t\t\tget { throw new NotImplementedExcep" +
                    "tion(); }\r\n\t\t}\r\n\t");
            
            #line 255 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
				else if (property.Name == "Kind")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic ");
            
            #line 260 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 260 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn (DefinitionKind)");
            
            #line 264 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 264 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 267 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
				else if (property.Name == "DataType")
				{
					if (nodeType == NodeType.Attribute)
					{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IScalarType ");
            
            #line 274 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\tif (");
            
            #line 278 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 278 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new Scal" +
                    "arType\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tName = ");
            
            #line 286 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 286 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".Name,\r\n\t\t\t\t\t\tTypeCode = (XmlTypeCode) ");
            
            #line 287 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 287 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".TypeCode,\r\n\t\t\t\t\t\tFullyQualifiedName = ");
            
            #line 288 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 288 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".FullyQualifiedName,\r\n\t\t\t\t\t\tIsCollectionType =  ");
            
            #line 289 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 289 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".IsCollectionType\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 294 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

					}
					else
					{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IType ");
            
            #line 299 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\tif (");
            
            #line 303 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 303 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new Base" +
                    "Type\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tName = ");
            
            #line 311 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 311 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".Name,\r\n\t\t\t\t\t\tFullyQualifiedName = ");
            
            #line 312 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 312 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".FullyQualifiedName,\r\n\t\t\t\t\t\tIsCollectionType = ");
            
            #line 313 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 313 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".IsCollectionType,\r\n\t\t\t\t\t\tSuggestedNamespace = ");
            
            #line 314 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 314 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".SuggestedNamespace\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 319 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

					}
				}
				else if (property.Name == "Direction")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic OperationDirection ");
            
            #line 325 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn (OperationDirection) ");
            
            #line 329 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 329 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 332 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
				else if (property.Name == "Parent")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IBase ");
            
            #line 337 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn parent;\r\n\t\t\t}\r\n\t\t}\r\n\t");
            
            #line 344 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
				else if (property.Name == "Facets")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n        public Facet[] Facets\r\n        {\r\n            get\r\n            {\r\n  " +
                    "              Facet[] facets = new Facet[");
            
            #line 353 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".Facets.Count];\r\n                var index = 0;\r\n                var arguments = " +
                    "new List<Argument>();\r\n\r\n                foreach (var facet in ");
            
            #line 357 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(@".Facets)
                {
                    facets[index] = new Facet
                    {
                        FacetType = new BaseType
					    {
						    Name = facet.FacetType.Name,
						    FullyQualifiedName = facet.FacetType.FullyQualifiedName,
						    IsCollectionType =  facet.FacetType.IsCollectionType
					    },

                        Arguments = arguments.Where(notused => { facet.Arguments.ToList().ForEach(a => arguments.Add(new Argument() { Parameter = a.ID, Value = a.Value })); return true; }).ToList<Argument>()
                    };

                    index++;
                }

                return facets;
            } 
        }
	");
            
            #line 377 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
				else if (property.Name != "RootElements" && property.Name != "ChildElements" && property.Name != "Attributes" && property.Name != "Operations" && property.Name != "Constructor" && property.Name != "Method" && property.Name != "AllowableContructTypes" && property.Name != "AllowableContainerTypes")
				{
	
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic ");
            
            #line 382 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 382 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn ");
            
            #line 386 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 386 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t");
            
            #line 390 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}
			}
		}
		
        foreach (var property in BaseType.GetProperties())
        {
            if (property.Name == "RootElements" || property.Name == "ChildElements")
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IEnumerable<IElement> ");
            
            #line 400 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n");
            
            #line 404 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				if (elementProperties.Count > 0)
				{
					foreach (var elemType in elementProperties)
					{

            
            #line default
            #line hidden
            this.Write("\t\t\t\tforeach (");
            
            #line 410 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 410 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elemType.Value.Name));
            
            #line default
            #line hidden
            this.Write(" element in this.");
            
            #line 410 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elemType.Key.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t{\r\n\t\t\t\t\tyield return (IElement) new ");
            
            #line 412 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".Client.");
            
            #line 412 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elemType.Value.Name));
            
            #line default
            #line hidden
            this.Write("(element, this);\r\n\t\t\t\t} \r\n");
            
            #line 414 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

					}
				}
				else
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\treturn null;\r\n");
            
            #line 421 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}

            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n");
            
            #line 426 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

			}
			else if (property.Name == "Attributes")
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IEnumerable<IAttribute> Attributes\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n");
            
            #line 435 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				if (attributeProperties.Count > 0)
				{
					foreach (var attributeType in attributeProperties)
					{

            
            #line default
            #line hidden
            this.Write("\t\t\t\tforeach (");
            
            #line 441 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 441 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeType.Value.Name));
            
            #line default
            #line hidden
            this.Write(" element in this.");
            
            #line 441 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeType.Key.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t{\r\n\t\t\t\t\tyield return (IAttribute) new ");
            
            #line 443 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".Client.");
            
            #line 443 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeType.Value.Name));
            
            #line default
            #line hidden
            this.Write("(element, this);\r\n\t\t\t\t} \r\n");
            
            #line 445 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

					}
				}
				else
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\treturn null;\r\n");
            
            #line 452 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}

            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n");
            
            #line 457 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

			}
            if (property.Name == "Operations")
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic IEnumerable<IOperation> Operations\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n");
            
            #line 466 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				if (operationProperties.Count > 0)
				{
					foreach (var operationType in operationProperties)
					{

            
            #line default
            #line hidden
            this.Write("\t\t\t\tforeach (");
            
            #line 472 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 472 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operationType.Value.Name));
            
            #line default
            #line hidden
            this.Write(" element in this.");
            
            #line 472 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operationType.Key.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t{\r\n\t\t\t\t\tyield return (IOperation) new ");
            
            #line 474 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType.Namespace));
            
            #line default
            #line hidden
            this.Write(".Client.");
            
            #line 474 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operationType.Value.Name));
            
            #line default
            #line hidden
            this.Write("(element, this);\r\n\t\t\t\t} \r\n");
            
            #line 476 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

					}
				}
				else
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\treturn null;\r\n");
            
            #line 483 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

				}

            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n");
            
            #line 488 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

			}
        }

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic void LoadChildren()\r\n\t\t{\r\n");
            
            #line 495 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

		if (elementProperties.Count > 0)
		{
			foreach (var elemType in elementProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == elemType.Value.Name && methodInfo.Name.EndsWith(BaseType.Name))
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);

            
            #line default
            #line hidden
            this.Write("            var ");
            
            #line 510 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query = context.");
            
            #line 510 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodInfo.Name));
            
            #line default
            #line hidden
            this.Write("Query(this.ID);\r\n\r\n            var ");
            
            #line 512 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("LoadOp = context.Load(");
            
            #line 512 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query, (result) =>\r\n            {\r\n\t\t\t\tif (ChildrenLoaded != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tC" +
                    "hildrenLoaded(this);\r\n\t\t\t\t}\r\n            }\r\n            , null);\r\n\r\n");
            
            #line 521 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

							break;
						}
                    }
                }
			}
		}

		if (attributeProperties.Count > 0)
		{
			foreach (var attributeType in attributeProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == attributeType.Value.Name)
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);

            
            #line default
            #line hidden
            this.Write("            var ");
            
            #line 543 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query = context.");
            
            #line 543 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodInfo.Name));
            
            #line default
            #line hidden
            this.Write("Query(this.ID);\r\n\r\n            var ");
            
            #line 545 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("LoadOp = context.Load(");
            
            #line 545 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query, (result) =>\r\n            {\r\n\t\t\t\tif (ChildrenLoaded != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tC" +
                    "hildrenLoaded(this);\r\n\t\t\t\t}\r\n            }\r\n            , null);\r\n\r\n");
            
            #line 554 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

							break;
						}
                    }
                }
			}
		}

		if (operationProperties.Count > 0)
		{
			foreach (var operationType in operationProperties)
			{
                foreach (var methodInfo in providerType.GetMethods())
                {
                    if (methodInfo.ReturnType.Name == "IQueryable`1" && methodInfo.GetParameters().Count() > 0)
                    {
                        var typeParm = methodInfo.ReturnType.GetGenericArguments().AsQueryable().Cast<Type>().FirstOrDefault();

						if (typeParm.Name == operationType.Value.Name)
						{
							var varQueryName = methodInfo.Name.Substring(0, 1).ToLower() + methodInfo.Name.Substring(1, methodInfo.Name.Length - 1);

            
            #line default
            #line hidden
            this.Write("            var ");
            
            #line 576 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query = context.");
            
            #line 576 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodInfo.Name));
            
            #line default
            #line hidden
            this.Write("Query(this.ID);\r\n\r\n            var ");
            
            #line 578 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("LoadOp = context.Load(");
            
            #line 578 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varQueryName));
            
            #line default
            #line hidden
            this.Write("Query, (result) =>\r\n            {\r\n\t\t\t\tif (ChildrenLoaded != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tC" +
                    "hildrenLoaded(this);\r\n\t\t\t\t}\r\n            }\r\n            , null);\r\n");
            
            #line 586 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

							break;
						}
                    }
                }
			}
		}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 595 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

	}

            
            #line default
            #line hidden
            this.Write("\t}\r\n}\t\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 601 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"
 
    public Type GetProvider(System.Type BaseType)
    {
        foreach (var type in BaseType.Assembly.GetTypes())
        {
            if (type.GetCustomAttributes(true).AsQueryable().Cast<Attribute>().Any(a => a is EnableClientAccessAttribute))
            {
                return type;
            }
        }

        return null;
    }

	public NodeType? GetNodeType(System.Type BaseType)
	{
		foreach (var interfaceType in BaseType.GetInterfaces())
		{
			if (interfaceType.Name == "IRoot")
			{
				return NodeType.Root;
			}
			else if (interfaceType.Name == "IElement")
			{
				return NodeType.Element;
			}
			else if (interfaceType.Name == "IAttribute")
			{
				return NodeType.Attribute;
			}
			else if (interfaceType.Name == "IOperation")
			{
				return NodeType.Operation;
			}
		}

		return null;
	}

    public List<System.Type> GetNodeTypes(System.Type BaseType)
    {
		var nodeTypes = new List<System.Type>();

		foreach (var type in BaseType.Assembly.GetTypes())
		{
			foreach (System.Type interfaceType in type.GetInterfaces())
			{
				if (interfaceType.Name == "IElement")
				{
					nodeTypes.Add(type);
				}
			}
		}

        return nodeTypes;
    }

    public List<System.Type> GetAttributeTypes(System.Type BaseType)
    {
        List<System.Type> attributeTypes = new List<System.Type>();

        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IAttribute")
                {
                    attributeTypes.Add(type);
                }
            }
        }

        return attributeTypes;
    }

    public List<System.Type> GetOperationTypes(System.Type BaseType)
    {
        List<System.Type> operationTypes = new List<System.Type>();

        foreach (var type in BaseType.Assembly.GetTypes())
        {
            foreach (System.Type interfaceType in type.GetInterfaces())
            {
                if (interfaceType.Name == "IOperation")
                {
                    operationTypes.Add(type);
                }
            }
        }

        return operationTypes;
    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\Ken\Documents\Mind Chemistry\Hydra\AbstraXGenerators\Templates\AbstraXClientInterfaceGenerator.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private global::System.Type _BaseTypeField;

/// <summary>
/// Access the BaseType parameter of the template.
/// </summary>
private global::System.Type BaseType
{
    get
    {
        return this._BaseTypeField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    if ((typeof(global::System.EventHandler).IsAssignableFrom(this.Session["DebugCallback"].GetType()) == false))
    {
        this.Error("The type \'System.EventHandler\' of the parameter \'DebugCallback\' did not match the" +
                " type of the data passed to the template.");
    }
    else
    {
        this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
        DebugCallbackValueAcquired = true;
    }
}
if ((DebugCallbackValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "DebugCallback");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::System.EventHandler));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._DebugCallbackField = ((global::System.EventHandler)(tc.ConvertFrom(parameterValue)));
            DebugCallbackValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.EventHandler\' of the parameter \'DebugCallback\' did not match the" +
                    " type of the data passed to the template.");
        }
    }
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        if ((typeof(global::System.EventHandler).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.EventHandler\' of the parameter \'DebugCallback\' did not match the" +
                    " type of the data passed to the template.");
        }
        else
        {
            this._DebugCallbackField = ((global::System.EventHandler)(data));
        }
    }
}
bool BaseTypeValueAcquired = false;
if (this.Session.ContainsKey("BaseType"))
{
    if ((typeof(global::System.Type).IsAssignableFrom(this.Session["BaseType"].GetType()) == false))
    {
        this.Error("The type \'System.Type\' of the parameter \'BaseType\' did not match the type of the " +
                "data passed to the template.");
    }
    else
    {
        this._BaseTypeField = ((global::System.Type)(this.Session["BaseType"]));
        BaseTypeValueAcquired = true;
    }
}
if ((BaseTypeValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "BaseType");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::System.Type));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._BaseTypeField = ((global::System.Type)(tc.ConvertFrom(parameterValue)));
            BaseTypeValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Type\' of the parameter \'BaseType\' did not match the type of the " +
                    "data passed to the template.");
        }
    }
}
if ((BaseTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BaseType");
    if ((data != null))
    {
        if ((typeof(global::System.Type).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Type\' of the parameter \'BaseType\' did not match the type of the " +
                    "data passed to the template.");
        }
        else
        {
            this._BaseTypeField = ((global::System.Type)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class AbstraXClientInterfaceGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
