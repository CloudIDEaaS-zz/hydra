<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ import namespace="AbstraX" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.List<ManagedList>" name="ManagedLists" #>
<#@ parameter type="System.Collections.Generic.List<GridColumn>" name="GridColumns" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="System.Collections.Generic.List<ESModule>" name="Exports" #>
<#@ parameter type="System.Collections.Generic.List<IDeclarable>" name="Declarations" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<AbstraX.QueryInfo>" name="CustomQueries" #>
<#@ parameter type="System.String" name="PageName" #>
<#@ parameter type="System.String" name="Authorize" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="System.String" name="ParentEntityName" #>
<#@ parameter type="System.String" name="EntityParentRefName" #>
<#@ parameter type="System.String" name="EntityPropertyRefName" #>
<#@ parameter type="System.Boolean" name="IsComponent" #>
<#@ parameter type="AbstraX.DataAnnotations.UIKind" name="UIKind" #>
<# 
    var pageName = this.PageName.ToCamelCase();
    var modelVariable = this.EntityName.ToCamelCase();
    var className = this.PageName + "Page";
    var textIdentifier = this.GridColumns.GetTextIdentifier();
    var textIdentifierName = textIdentifier.Name;
    var gridName = this.PageName.ToCamelCase() + "Grid"; 
    string parentRefVariable = null;
    string propertyRefName = null;

    if (this.EntityPropertyRefName != null)
    {
        propertyRefName = this.EntityPropertyRefName.ToCamelCase();
    }

    if (this.EntityParentRefName != null)
    {
        parentRefVariable = this.EntityParentRefName.ToCamelCase();
    }

    if (this.IsComponent)
    {
        var component = new Component(className, this.UIKind);

        this.Declarations.Add(component);
        this.Exports.Add(component);
    }
    else
    {
        var page = new Page(className, this.UIKind);

        this.Declarations.Add(page);
        this.Exports.Add(page);
    }

    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }
#>

@PageName("<#= this.PageName #>")
@RecordExpression("<#= this.EntityName #> [{<#= this.MakeVariable(modelVariable, textIdentifierName) #>}]")
<# if (!IsComponent)
   {
#>
@IonicPage()
<#
   }
#>
<# if (this.Authorize.Length > 0)
   {
#>
@Authorize("<#= this.Authorize #>")
<# 
   }
#>
@Component({
  selector: 'page-<#= pageName #>',
  templateUrl: '<#= pageName #>.html',
  styleUrls: ['./<#= pageName #>.scss']
})
export class <#= className #> extends GridPage {
<# 
    if (this.EntityParentRefName != null) 
    {
#>
  <#= parentRefVariable #>: <#= this.EntityParentRefName #>;
<#
    }
#>

  columnDefs = [];
  rowData: any;
  @ViewChild("<#= gridName #>") <#= gridName #>: AgGridNg2;

  constructor(public navCtrl: NavController,
    public navParams: NavParams,
    public <#= modelVariable #>Provider: <#= this.EntityName #>Provider,
    public <#= modelVariable #>Validator: <#= this.EntityName #>Validator,
    public toastCtrl: ToastController,
    public popoverCtrl: PopoverController,
    private alertCtrl: AlertController,
    private translateService: TranslateService,
    private ngZone: NgZone) {

    super();

    this.translateService.get([<# 

    var builder = new StringBuilder();

    foreach (var column in this.GridColumns)
    {
        builder.AppendWithLeadingIfLength(", ", column.TranslationKey.SurroundWithQuotes());
    }

    this.Write(builder.ToString());

    #>]).subscribe(values => {
        this.columnDefs = 
        [
<#
    foreach (var column in this.GridColumns)
    {
#>
          { headerName: <#= string.Format("values[\"{0}\"]", column.TranslationKey) #>, field: "<#= column.Name.ToCamelCase() #>", editable: true },
<#
    }

    foreach (var managedList in this.ManagedLists)
    {
#>
          { headerName: <#= string.Format("values[\"{0}\"]", managedList.TranslationKey) #>, field: "<#= modelVariable #>Data", cellRenderer: this.render<#= managedList.Name #> },
          {
             headerName: "", field: "<#= modelVariable #>Id", cellRendererFramework: EditDeleteButtons, width: 80, cellRendererParams: {
                 onEditClick: (rowData) => this.onEdit<#= this.EntityName #>Click(rowData),
                 onDeleteClick: (rowData) => this.onDelete<#= this.EntityName #>Click(rowData)
              }
            }
<#
    }
#>
        ];
    });
  }

  ngOnInit() {

<# 
    if (this.EntityParentRefName != null) 
    {
#>
    this.<#= parentRefVariable #> = <<#= this.EntityParentRefName #>>this.navParams.get("<#= parentRefVariable #>");
<#
        if (this.CustomQueries.HasQueryForKind(QueryKind.LoadParentReference))
        {
            var query = this.CustomQueries.GetQueryForKind(QueryKind.LoadParentReference);
#>
    this.<#= gridName #>.cellValueChanged.subscribe(p => this.cellValueChanged(p));

    if (this.<#= parentRefVariable #> == null)
    {
      let observable = this.<#= modelVariable #>Provider.<#= query.ClientProviderMethodName #>();

      observable.subscribe((response) => {
        this.<#= parentRefVariable #> = <<#= this.EntityParentRefName #>>response;
        this.update<#= this.PageName #>Grid();
      }, err => {
        let toast = this.toastCtrl.create({
          message: err.message,
          duration: 3000,
          position: "top"
        });
        toast.present();
      });
    }
    else
    {
        this.<#= gridName #>.cellValueChanged.subscribe(p => this.cellValueChanged(p));
        this.update<#= this.PageName #>Grid();
    }
<#
        }
        else
        {
#>

    this.update<#= this.PageName #>Grid();
<#
        }
    }

    foreach (var managedList in this.ManagedLists)
    {
#>
    this.bindClickMethod("<#= className #>", "on<#= managedList.Name #>Click", this.on<#= managedList.Name #>Click);
<#
    }
#>
  }

  ionViewDidLoad() {
    console.log("ionViewDidLoad <#= this.PageName #>");
  }

  cellValueChanged(params: any) {<#
    builder = new StringBuilder();

    foreach (var column in this.GridColumns)
    {
        builder.AppendWithLeadingIfLength(", ", modelVariable + "." + this.MakeVariable(modelVariable, column.Name));
    }
#>

    let <#= modelVariable #> = <<#= this.EntityName #>>params.data;
    let <#= modelVariable #>Form = this.<#= modelVariable #>Validator.create<#= this.EntityName #>Form(<#= builder.ToString() #>);

    if (<#= modelVariable #>Form.invalid) {
      let column = params.column;
      let columnName = column.colId;
      let control = this.<#= modelVariable #>Validator.getControl(columnName);
      let rowNode = params.node;
      let toast: Toast;

      rowNode.setDataValue(column, params.oldValue);

      this.<#= gridName #>.api.stopEditing(true);
      this.<#= gridName #>.api.setFocusedCell(params.rowIndex, columnName);
      this.<#= gridName #>.api.startEditingCell({ rowIndex: params.rowIndex, colKey: columnName });

      toast = this.toastCtrl.create({
        message: this.<#= modelVariable #>Validator.getValidationErrorsText(columnName),
        duration: 2000,
        position: "top"
      });

      toast.present().then((result) => {

        let editor = new List<ICellEditorComp>(this.<#= gridName #>.api.getCellEditorInstances()).single();
        let input = <HTMLInputElement>editor.getGui();

        input.focus();

      }, (err) => {
        console.log(err);
      });
    }
  }

  update<#= this.PageName #>Grid() {
<# 
    if (this.EntityParentRefName != null) 
    {
#>
    this.rowData = this.<#= modelVariable #>Provider.get<#= this.ParentEntityName #>For<#= this.EntityParentRefName #>(this.<#= parentRefVariable #>.<#= propertyRefName #>);
<#
    }
    else
    {
#>
    this.rowData = this.<#= modelVariable #>Provider.get<#= this.ParentEntityName #>();
<#
    }
#>
  }

  presentAdd<#= this.EntityName #>() {

    let popover = this.popoverCtrl.create(Edit<#= this.EntityName #>Page, { userAction: "New <#= this.EntityName #>" });
    popover.present();

    popover.onDidDismiss((data: any, role: string) => {
      this.update<#= this.PageName #>Grid();
    });
  }

  onEdit<#= this.EntityName #>Click(params: any) {
    this.ngZone.run(() => this.edit<#= this.EntityName #>(<<#= this.EntityName #>>params));
  }

  onDelete<#= this.EntityName #>Click(params: any) {
    this.ngZone.run(() => this.delete<#= this.EntityName #>(<<#= this.EntityName #>>params));
  }

  edit<#= this.EntityName #>(<#= modelVariable #>: <#= this.EntityName #>) {

    let popover = this.popoverCtrl.create(Edit<#= this.EntityName #>Page, { userAction: "Edit <#= this.EntityName #>", <#= modelVariable #>: <#= modelVariable #> });
    popover.present();

    popover.onDidDismiss((data: any, role: string) => {
      this.update<#= this.PageName #>Grid();
    });
  }

<#
    // todo kn - translate below text
    // see https://damienbod.com/2014/03/20/web-api-localization/
#>
  delete<#= this.EntityName #>(<#= modelVariable #>: <#= this.EntityName #>) {

    this.presentConfirm(() => {
      let observable = this.<#= modelVariable #>Provider.delete<#= this.EntityName #>(<#= modelVariable #>.<#= modelVariable #>Id);

      observable.subscribe((response) => {
        this.update<#= this.PageName #>Grid();
      }, err => {
        let toast = this.toastCtrl.create({
          message: err.message,
          duration: 3000,
          position: "top"
        });
        toast.present();
      });

    });
  }

  presentConfirm(handler: Function) {
    let alert = this.alertCtrl.create({
      title: "Confirm delete",
      message: "Are you sure you want to delete this <#= modelVariable #>?",
      buttons: [
        {
          text: "Cancel",
          role: "cancel",
          handler: () => {
            console.log("Cancel clicked");
          }
        },
        {
          text: "Delete",
          handler: () => {
            handler();
          }
        }
      ]
    });

    alert.present();
  }
<#
    foreach (var managedList in this.ManagedLists)
    {
#>

  render<#= managedList.Name #>(params: any): string {
    return GridPage.renderLinkElement("<#= this.PageName #>", "on<#= managedList.Name #>Click", "Manage <#= managedList.Name #>", params);
  }

  on<#= managedList.Name #>Click(params: string) {
    this.ngZone.run(() => this.manage<#= managedList.Name #>(params));
  }

  manage<#= managedList.Name #>(params) {

    var obj = this.parseLinkParams(params);
    this.navCtrl.push(<#= managedList.Name #>Page, obj);
  }
<#
    }
#>
}
