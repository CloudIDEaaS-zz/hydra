<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.List<IdentityField>" name="IdentityFields" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<AbstraX.Angular.Component>" name="Pages" #>
<#@ parameter type="System.Collections.Generic.List<ESModule>" name="Exports" #>
<#@ parameter type="System.Collections.Generic.List<IDeclarable>" name="Declarations" #>
<#@ parameter type="System.String" name="PageName" #>
<#@ parameter type="System.String" name="Authorize" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="AbstraX.DataAnnotations.UIKind" name="UIKind" #>
<# 
    var pageName = this.PageName.ToCamelCase();
    var className = this.PageName + "Page";
    var component = new Page(className, this.UIKind);
    var modelVariable = this.EntityName.ToCamelCase();

    this.Declarations.Add(component);
    this.Exports.Add(component);

    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }
#>

@IonicPage()
<# if (this.Authorize.Length > 0)
   {
#>
@Authorize("<#= this.Authorize #>")
<# 
   }
#>
@Component({
  selector: 'component-<#= pageName #>',
  templateUrl: '<#= pageName #>.html',
  styleUrls: ['./<#= pageName #>.scss']
})
export class LoginPage {
  // The account fields for the login form.
  // If you're using the username field with or without email, make
  // sure to add it to the type
  account: { userName: string, password: string } = {
    userName: '',
    password: ''
  };

  // Our translated text strings
  private loginErrorString: string;

  constructor(public navCtrl: NavController,
    public <#= modelVariable #>Provider: <#= this.EntityName #>Provider,
    public toastCtrl: ToastController,
    public loadingController: LoadingController,
    public translateService: TranslateService) {
  }

  // Attempt to login in through our User service
  doLogin() {

      let loading = this.loadingController.create({content : "Logging in, please wait..."});
      loading.present();

      console.log('logging in');

      this.<#= modelVariable #>Provider.login(this.account).subscribe((resp) => {
      this.navCtrl.push(MainPage);

      loading.dismissAll();

    }, (err) => {
      // Unable to log in
      let toast = this.toastCtrl.create({
        message: err.message,
        duration: 3000,
        position: 'top'
      });

      loading.dismissAll();
      toast.present();
    });
  }
}
