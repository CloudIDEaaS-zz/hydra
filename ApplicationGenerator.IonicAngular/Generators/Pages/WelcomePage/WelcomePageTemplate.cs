// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Pages.WelcomePage
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class WelcomePageTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"<ion-header no-border>
  <ion-toolbar>
    <ion-buttons slot=""end"">
      <ion-button color='primary' (click)=""startApp()"" [hidden]=""!showSkip"">Continue</ion-button>
    </ion-buttons>
  </ion-toolbar>
</ion-header>

<ion-content fullscreen=""true"">
  <ion-slides #slides (ionSlideWillChange)=""onSlideChangeStart($event)"" pager=""false"">
    <ion-slide>
      <div *ngIf=""welcomeData"" class=""slide-container"">
");
            
            #line 30 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"

    if (this.UsesAboutThisImage)
    {

            
            #line default
            #line hidden
            this.Write("    <a href=\"");
            
            #line 34 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AnchorHref));
            
            #line default
            #line hidden
            this.Write("\" title=\"");
            
            #line 34 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AnchorTitle));
            
            #line default
            #line hidden
            this.Write("\">\r\n        <img src=\"");
            
            #line 35 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SlideImageUrl));
            
            #line default
            #line hidden
            this.Write("\" class=\"slide-image\" />\r\n    </a>\r\n");
            
            #line 37 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("        <img src=\"");
            
            #line 42 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SlideImageUrl));
            
            #line default
            #line hidden
            this.Write("\" class=\"slide-image\" />\r\n");
            
            #line 43 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"        <h2 class=""slide-title"">
          <b>
            {{ welcomeData.details.welcomeTitle }}
          </b>
        </h2>
        <p>
            {{ welcomeData.details.description }}
        </p>
      </div>
    </ion-slide>
  </ion-slides>
</ion-content>
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Pages\WelcomePage\WelcomePageTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _PageNameField;

/// <summary>
/// Access the PageName parameter of the template.
/// </summary>
private string PageName
{
    get
    {
        return this._PageNameField;
    }
}

private string _EntityNameField;

/// <summary>
/// Access the EntityName parameter of the template.
/// </summary>
private string EntityName
{
    get
    {
        return this._EntityNameField;
    }
}

private string _AppNameField;

/// <summary>
/// Access the AppName parameter of the template.
/// </summary>
private string AppName
{
    get
    {
        return this._AppNameField;
    }
}

private string _AppDescriptionField;

/// <summary>
/// Access the AppDescription parameter of the template.
/// </summary>
private string AppDescription
{
    get
    {
        return this._AppDescriptionField;
    }
}

private bool _UsesAboutThisImageField;

/// <summary>
/// Access the UsesAboutThisImage parameter of the template.
/// </summary>
private bool UsesAboutThisImage
{
    get
    {
        return this._UsesAboutThisImageField;
    }
}

private string _AnchorHrefField;

/// <summary>
/// Access the AnchorHref parameter of the template.
/// </summary>
private string AnchorHref
{
    get
    {
        return this._AnchorHrefField;
    }
}

private string _AnchorTitleField;

/// <summary>
/// Access the AnchorTitle parameter of the template.
/// </summary>
private string AnchorTitle
{
    get
    {
        return this._AnchorTitleField;
    }
}

private string _SlideImageUrlField;

/// <summary>
/// Access the SlideImageUrl parameter of the template.
/// </summary>
private string SlideImageUrl
{
    get
    {
        return this._SlideImageUrlField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool PageNameValueAcquired = false;
if (this.Session.ContainsKey("PageName"))
{
    this._PageNameField = ((string)(this.Session["PageName"]));
    PageNameValueAcquired = true;
}
if ((PageNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PageName");
    if ((data != null))
    {
        this._PageNameField = ((string)(data));
    }
}
bool EntityNameValueAcquired = false;
if (this.Session.ContainsKey("EntityName"))
{
    this._EntityNameField = ((string)(this.Session["EntityName"]));
    EntityNameValueAcquired = true;
}
if ((EntityNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EntityName");
    if ((data != null))
    {
        this._EntityNameField = ((string)(data));
    }
}
bool AppNameValueAcquired = false;
if (this.Session.ContainsKey("AppName"))
{
    this._AppNameField = ((string)(this.Session["AppName"]));
    AppNameValueAcquired = true;
}
if ((AppNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppName");
    if ((data != null))
    {
        this._AppNameField = ((string)(data));
    }
}
bool AppDescriptionValueAcquired = false;
if (this.Session.ContainsKey("AppDescription"))
{
    this._AppDescriptionField = ((string)(this.Session["AppDescription"]));
    AppDescriptionValueAcquired = true;
}
if ((AppDescriptionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppDescription");
    if ((data != null))
    {
        this._AppDescriptionField = ((string)(data));
    }
}
bool UsesAboutThisImageValueAcquired = false;
if (this.Session.ContainsKey("UsesAboutThisImage"))
{
    this._UsesAboutThisImageField = ((bool)(this.Session["UsesAboutThisImage"]));
    UsesAboutThisImageValueAcquired = true;
}
if ((UsesAboutThisImageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UsesAboutThisImage");
    if ((data != null))
    {
        this._UsesAboutThisImageField = ((bool)(data));
    }
}
bool AnchorHrefValueAcquired = false;
if (this.Session.ContainsKey("AnchorHref"))
{
    this._AnchorHrefField = ((string)(this.Session["AnchorHref"]));
    AnchorHrefValueAcquired = true;
}
if ((AnchorHrefValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AnchorHref");
    if ((data != null))
    {
        this._AnchorHrefField = ((string)(data));
    }
}
bool AnchorTitleValueAcquired = false;
if (this.Session.ContainsKey("AnchorTitle"))
{
    this._AnchorTitleField = ((string)(this.Session["AnchorTitle"]));
    AnchorTitleValueAcquired = true;
}
if ((AnchorTitleValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AnchorTitle");
    if ((data != null))
    {
        this._AnchorTitleField = ((string)(data));
    }
}
bool SlideImageUrlValueAcquired = false;
if (this.Session.ContainsKey("SlideImageUrl"))
{
    this._SlideImageUrlField = ((string)(this.Session["SlideImageUrl"]));
    SlideImageUrlValueAcquired = true;
}
if ((SlideImageUrlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SlideImageUrl");
    if ((data != null))
    {
        this._SlideImageUrlField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
