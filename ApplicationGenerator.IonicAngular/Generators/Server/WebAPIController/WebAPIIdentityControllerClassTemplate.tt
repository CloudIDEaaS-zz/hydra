<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.List<RelatedEntity>" name="RelatedEntities" #>
<#@ parameter type="System.Collections.Generic.List<Generators.EntityProperty>" name="EntityProperties" #>
<#@ parameter type="System.String" name="RootNamespace" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="System.String" name="KeyType" #>
<#@ parameter type="System.String" name="KeyName" #>
<#@ parameter type="System.String" name="ContainerSet" #>
<#@ parameter type="AbstraX.ServerInterfaces.IElement" name="Container" #>
<#
    var entityVariable = this.EntityName.ToCamelCase();
    var containerSetVariable = this.ContainerSet.ToCamelCase();
    var containerClass = this.Container.Name;
    var containerVariable = this.Container.Name.ToCamelCase();
    var lambdaParameter = containerVariable.Left(1);
    var userPasswordField = this.EntityProperties.GetIdentityField(IdentityFieldKind.PasswordHash);
#>
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Utils;
using System.Security.Cryptography;
using System.Net.Mail;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using Microsoft.Data;
using System.Data;
using System.Security.Principal;
using <#= this.RootNamespace #>.Services.Providers;
using <#= this.RootNamespace #>.Services.Models;
using Models = <#= this.RootNamespace #>.Entities.Models;
using <#= this.EntityName #> = <#= this.RootNamespace #>.Services.Models.<#= this.EntityName #>;
using <#= this.RootNamespace #>.Entities.Models;
using <#= this.RootNamespace #>.Entities;

namespace <#= this.RootNamespace #>.Services.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class <#= this.ControllerName #>Controller : ControllerBase
    {
        private <#= containerClass #> <#= containerVariable #>;

        public <#= this.ControllerName #>Controller(<#= containerClass #> <#= containerVariable #>)
        {
            this.<#= containerVariable #> = <#= containerVariable #>;
        }

<#
    foreach (var relatedEntity in this.RelatedEntities)
    {
        var property = relatedEntity.Name;
        var propertyVariable = relatedEntity.Name.ToCamelCase();
        var sortBy = relatedEntity.SortBy;
        var sortDirection = relatedEntity.SortDirection;

        if (relatedEntity.IsEntitySet)
        {
#>
        [HttpGet]
        [Route("~/api/<#= propertyVariable #>")]
        [Authorize(Roles = "Administrators")]
        public Models.Client<#= this.EntityName #>[] Get<#= property #>()
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var <#= propertyVariable #> = <#= containerVariable #>.<#= property #>;

                return <#= propertyVariable #>.Select(<#= lambdaParameter #> => new <#= this.EntityName #>
                {
<#
            foreach (var entityProperty in this.EntityProperties)
            {
#>
                    <#= entityProperty.Name #> = <#= lambdaParameter #>.<#= entityProperty.Name #>,
<#
            }

            if (sortDirection == SortDirection.Ascending)
            {
#>
                }).OrderBy(c => c.<#= sortBy #>).ToArray();
<#
            }
            else
            {
#>
                }).OrderByDescending(c => c.<#= sortBy #>).ToArray();
<#
            }
#>
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }

<#
        }
        else
        {
            var parentRefName = relatedEntity.EntityParentRef.Name;
            var parentRefVariableName = parentRefName.ToCamelCase();
            var propertyRefVariableName = relatedEntity.ThisPropertyRef.Name.ToCamelCase();
            var scriptType = relatedEntity.ThisPropertyRefScriptType;
            var shortType = relatedEntity.ThisPropertyRefShortType;
            var containerSetName = relatedEntity.ContainerSet.Name;

#>
        [Route("~/api/<#= containerSetName #>/{<#= propertyRefVariableName #>:<#= shortType.ToLower() #>}/<#= property.ToLower() #>")]
        [HttpGet]
        public Models.<#= this.EntityName #>[] Get<#= property #>For<#= parentRefName #>(<#= shortType #> <#= propertyRefVariableName #>)
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var <#= propertyVariable #> = <#= containerVariable #>.<#= property #>;

                return <#= propertyVariable #>.Where(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= relatedEntity.ThisPropertyRef.Name #> == <#= propertyRefVariableName #>).Select(<#= lambdaParameter #> => new <#= this.EntityName #>
                {
<#
            foreach (var entityProperty in this.EntityProperties)
            {
#>
                    <#= entityProperty.Name #> = <#= lambdaParameter #>.<#= entityProperty.Name #>,
<#
            }

            if (sortDirection == SortDirection.Ascending)
            {
#>
                }).OrderBy(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= sortBy #>).ToArray();
<#
            }
            else
            {
#>
                }).OrderByDescending(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= sortBy #>).ToArray();
<#
            }
#>
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }
<#
        }
    }
#>

        [HttpGet]
        [Route("~/api/<#= entityVariable #>/{id:<#= this.KeyType.ToLower() #>}")]
        public Models.Client<#= this.EntityName #> Get<#= this.EntityName #>(<#= this.KeyType #> id)
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var <#= containerSetVariable #> = <#= containerVariable #>.<#= this.ContainerSet #>;

                return <#= containerSetVariable #>.Where(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= this.KeyName #> == id).Select(<#= lambdaParameter #> => new Models.Client<#= this.EntityName #>
                {
<#
            foreach (var entityProperty in this.EntityProperties)
            {
                if (entityProperty != userPasswordField)
                {
#>
                    <#= entityProperty.Name #> = <#= lambdaParameter #>.<#= entityProperty.Name #>,
<#
                }
            }
#>
                }).Single();
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }

        [HttpPost]
        [Authorize(Roles = "Administrator")]
        public void Create<#= this.EntityName #>(Models.Client<#= this.EntityName #> <#= entityVariable #>)
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var <#= containerSetVariable #> = <#= containerVariable #>.<#= this.ContainerSet #>;

                <#= containerSetVariable #>.Add(new Entities.<#= this.EntityName #>
                {
<#
            foreach (var entityProperty in this.EntityProperties)
            {
                if (entityProperty.IsKey)
                {
                    if (entityProperty.DataType == "Guid")
                    {
#>
                    <#= entityProperty.Name #> = Guid.NewGuid(),
<#
                    }
                }
                else
                {
                    if (entityProperty != userPasswordField)
                    {
#>
                    <#= entityProperty.Name #> = <#= entityVariable #>.<#= entityProperty.Name #>,
<#
                    }
                }
            }
#>
                });

                <#= containerVariable #>.SaveChanges();
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }

        /*
        [HttpPost]
        [Route("~/api/register")]
        public void Register<#= this.EntityName #>(Models.Register<#= this.EntityName #> <#= entityVariable #>)
        {
            var <#= containerSetVariable #> = <#= containerVariable #>.<#= this.ContainerSet #>;

            <#= containerSetVariable #>.Add(new Entities.<#= this.EntityName #>
            {
<#
            foreach (var entityProperty in this.EntityProperties)
            {
                if (entityProperty.IsKey)
                {
                    if (entityProperty.DataType == "Guid")
                    {
#>
                <#= entityProperty.Name #> = Guid.NewGuid(),
<#
                    }
                }
                else
                {
#>
                <#= entityProperty.Name #> = <#= entityVariable #>.<#= entityProperty.Name #>,
<#
                }
            }
#>
            });

            <#= containerVariable #>.SaveChanges();
        }
        */

        [HttpPut]
        public void Update<#= this.EntityName #>(Models.Client<#= this.EntityName #> <#= entityVariable #>)
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var update<#= this.EntityName #> = <#= containerVariable #>.<#= this.ContainerSet #>.Single(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= this.KeyName #> == <#= entityVariable #>.<#= this.KeyName #>);

<#
            foreach (var entityProperty in this.EntityProperties)
            {
                if (!entityProperty.IsKey && entityProperty != userPasswordField)
                {
#>
                update<#= this.EntityName #>.<#= entityProperty.Name #> = <#= entityVariable #>.<#= entityProperty.Name #>;
<#
                }
            }
#>

                <#= containerVariable #>.SaveChanges();
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }

        [HttpDelete]
        public void Delete<#= this.EntityName #>(<#= this.KeyType #> id)
        {
            var identity = this.User.Identity;

            if (identity.IsAuthenticated)
            {
                var <#= containerSetVariable #> = <#= containerVariable #>.<#= this.ContainerSet #>;
                var delete<#= this.EntityName #> = <#= containerSetVariable #>.Single(<#= lambdaParameter #> => <#= lambdaParameter #>.<#= this.KeyName #> == id);

                <#= containerSetVariable #>.Remove(delete<#= this.EntityName #>);

                <#= containerVariable #>.SaveChanges();
            }
            else
            {
                throw new UnauthorizedAccessException();
            }
        }
    }
}
