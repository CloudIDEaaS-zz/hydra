<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="AbstraX.TemplateObjects.EntityObject" name="EntityObject" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using System.Data.Common;
using Utils;
<#
    var entityType = this.EntityObject.DynamicEntityType;
#>

namespace <#= entityType.Namespace #>
{
<#
    if (entityType.BaseType == typeof(object))
    {
#>
    public partial class <#= entityType.Name #>
    {
<#
    }
    else
    {
#>
    public partial class <#= entityType.Name #> : <#= entityType.BaseType.Name #>
    {
<#
    }
#>
        private IConfiguration configuration;
        private IHostEnvironment environment;

        public <#= entityType.Name #>()  // for unit testing
        { 
        }

        public <#= entityType.Name #>(DbContextOptions<<#= entityType.Name #>> options, IHostEnvironment environment, IConfiguration configuration) : base(options)
        {
            var database = this.Database;
            DbConnection connection;

            this.configuration = configuration;
            this.environment = environment;

            if (database.ProviderName == "Microsoft.EntityFrameworkCore.Sqlite")
            {
                connection = database.GetDbConnection();

                if (connection.State == System.Data.ConnectionState.Closed)
                {
                    database.OpenConnection();
                    database.EnsureCreated();
                }
            }
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseLazyLoadingProxies();

            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }

<#
    foreach (var property in entityType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.DeclaredOnly))
    {
        var entityAttribute = this.EntityObject.Attributes.Single(a => a.DynamicPropertyName == property.Name);
#>
        <#= entityAttribute.GetAttributeCode(2) #>
        <#= property.GetSignature(false, true) #>
<#
    }
#>
    }
}
