<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="AbstraX.TemplateObjects.EntityObject" name="EntityObject" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Utils;
using AbstraX.DataAnnotations;
using System.ComponentModel;
<#
    var entityType = this.EntityObject.DynamicEntityType;
    var metadataType = this.EntityObject.DynamicEntityMetadataType;
#>

namespace <#= entityType.Namespace #>
{
    <#= this.EntityObject.GetAttributeCode(1) #>
    public partial class <#= entityType.Name #>
    {
    }

    <#= this.EntityObject.GetMetadataAttributeCode(1) #>
    public partial class <#= metadataType.Name #>
    {
<#
    foreach (var property in entityType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.DeclaredOnly))
    {
        var entityAttribute = this.EntityObject.Attributes.Single(a => a.DynamicPropertyName == property.Name);
#>
        <#= entityAttribute.GetMetadataAttributeCode(2) #>
        <#= property.GetSignature(false, true) #>

<#
    }
#>
    }
}
