<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="AbstraX.Angular.AngularModule" name="AngularModule" #>
<#@ parameter type="AbstraX.DataAnnotations.UILoadKind" name="UILoadKind" #>
<#@ parameter type="AbstraX.DataAnnotations.UIKind" name="UIKind" #>
<#@ parameter type="System.String" name="ModuleName" #>
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';
<# 
    var className = this.ModuleName;
    var builder = new StringBuilder();
    var component = this.Imports.GetComponent(this.UILoadKind, this.UIKind);
    var indent4 = this.GetIndent(4);

    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }

    // TODO - add module specific imports below this block
#>

@NgModule({
  declarations: [
<#  
    foreach (var declarable in this.AngularModule.Declarations)
    {
        builder.AppendWithLeadingIfLength(",\r\n", indent4 + declarable.Name);
    }

    this.WriteLine(builder.ToString());
#>  ],
  imports: [
    CommonModule,
    IonicModule<#  
    builder = new StringBuilder();

    if (this.AngularModule.Imports.Count > 0)
    {
        this.WriteLine(",");

        foreach (var import in this.AngularModule.Imports)
        {
            builder.AppendWithLeadingIfLength(",\r\n", indent4 + import.Name);
        }

        this.WriteLine(builder.ToString());
    }
    else
    {
        this.WriteLine("");
    }

#>  ]<#  

    if (this.UILoadKind == AbstraX.DataAnnotations.UILoadKind.MainPage)
    {
#>,
  entryComponents: [<#= component.Name #>]<#
    }
    
    if (this.AngularModule.Providers.Count > 0)
    {
        this.WriteLine(",");
#>
  providers: [
<#
        builder = new StringBuilder();

        foreach (var provider in this.AngularModule.Providers)
        {
            builder.AppendWithLeadingIfLength(",\r\n", indent4 + provider.Name);
        }

        this.WriteLine(builder.ToString());
#>
  ]<#
    }
    else
    {
        this.WriteLine("");
    }

    if (this.AngularModule.Exports.Count > 0)
    {
        this.WriteLine(",");
#>
  exports: [
<#
        builder = new StringBuilder();

        foreach (var export in this.AngularModule.Exports)
        {
            builder.AppendWithLeadingIfLength(",\r\n", indent4 + export.Name);
        }

        this.WriteLine(builder.ToString());
#>
  ]
<#
    }
 #>
})
export class <#= className #> {}
