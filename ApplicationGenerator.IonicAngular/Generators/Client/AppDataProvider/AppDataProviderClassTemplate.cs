// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.AppDataProvider
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using AbstraX.DataAnnotations;
    using AbstraX;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\AppDataProvider\AppDataProviderClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AppDataProviderClassTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 13 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\AppDataProvider\AppDataProviderClassTemplate.tt"

    // this serves info from data.json (see Generators\Client\Theme\DataJsonTemplate.tt)

            
            #line default
            #line hidden
            this.Write("import { HttpClient } from \'@angular/common/http\';\r\nimport { Injectable } from \'@" +
                    "angular/core\';\r\nimport { Observable, of } from \'rxjs\';\r\nimport { map } from \'rxj" +
                    "s/operators\';\r\nimport { UserDataProvider } from \'./userdata.provider\';\r\n\r\nexport" +
                    " interface PageData {\r\n    pageTitle: string;\r\n    metaDescription: string;\r\n   " +
                    " metaKeywords: string;\r\n}\r\n\r\nexport interface WelcomeDetails {\r\n    welcomeTitle" +
                    ": string;\r\n    description: string;\r\n    startAppTitle: string;\r\n    splashScree" +
                    "nAlt: string;\r\n}\r\n\r\nexport interface WelcomeData {\r\n    page: PageData;\r\n    det" +
                    "ails: WelcomeDetails;\r\n}\r\n\r\nexport interface AboutHeader {\r\n    aboutBannerAlt: " +
                    "string;\r\n    description: string;\r\n    version: string;\r\n}\r\n\r\nexport interface M" +
                    "ainPageLink {\r\n    title: string;\r\n    text: string;\r\n    url: string;\r\n}\r\n\r\nexp" +
                    "ort interface SocialLink {\r\n    visitTitle: string;\r\n    visitText: string;\r\n   " +
                    " shareTitle: string;\r\n    shareText: string;\r\n    tinyIcon: string;\r\n    smallIc" +
                    "on: string;\r\n    largeIcon: string;\r\n    iconAlt: string;\r\n    accountUrl: strin" +
                    "g;\r\n    shareUrl: string;\r\n    enable: boolean;\r\n}\r\n\r\nexport interface AppStore " +
                    "{\r\n    name: string;\r\n    title: string;\r\n    text: string;\r\n    tinyLogo: strin" +
                    "g;\r\n    smallLogo: string;\r\n    largeLogo: string;\r\n    logoAlt: string;\r\n    ac" +
                    "countUrl: string;\r\n    device: string;\r\n    allowRating: boolean;\r\n}\r\n\r\nexport i" +
                    "nterface SidelLink {\r\n    title: string;\r\n    Logo: string;\r\n    url: string;\r\n}" +
                    "\r\n\r\nexport interface AboutDetails {\r\n    header: AboutHeader;\r\n    mainPageLinks" +
                    ": MainPageLink[];\r\n    socialLinks: SocialLink[];\r\n    appStoreLinks: AppStore[]" +
                    ";\r\n    tellOthers: SocialLink[];\r\n    sidelLinks: SidelLink[];\r\n}\r\n\r\nexport inte" +
                    "rface AboutData {\r\n    page: PageData;\r\n    details: AboutDetails;\r\n}\r\n\r\n\r\nexpor" +
                    "t interface LicenseDetails {\r\n    content: string;\r\n    licenseUrl: string;\r\n   " +
                    " licenseUrlTitle: string;\r\n    questionsEmailAddress: string;\r\n    questionsEmai" +
                    "lAddressTitle: string;\r\n    questionsMailingAddress: string;\r\n}\r\n\r\nexport interf" +
                    "ace LicenseData {\r\n    page: PageData;\r\n    details: LicenseDetails;\r\n}\r\n\r\n\r\nexp" +
                    "ort interface SupportDetails {\r\n    content: string;\r\n    supportUrl: string;\r\n " +
                    "   supportUrlTitle: string;\r\n    supportEmailAddress: string;\r\n    supportEmailA" +
                    "ddressTitle: string;\r\n}\r\n\r\nexport interface SupportData {\r\n    page: PageData;\r\n" +
                    "    details: SupportDetails;\r\n}\r\n\r\nexport interface ContentDetails {\r\n  content:" +
                    " string;\r\n}\r\n\r\nexport interface ContentPage {\r\n    uiPath: string;\r\n    page: Pa" +
                    "geData;\r\n    details: ContentDetails;\r\n    content: string;\r\n    menuIcon: strin" +
                    "g;\r\n}\r\n\r\nexport interface RootData {\r\n    welcome: WelcomeData[];\r\n    about: Ab" +
                    "outData[];\r\n    license: LicenseData[];\r\n    support: SupportData[];\r\n    pages:" +
                    " ContentPage[];\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: \'root\'\r\n})\r\nexport class Ap" +
                    "pDataProvider {\r\n  data: RootData;\r\n\r\n  constructor(public http: HttpClient, pub" +
                    "lic user: UserDataProvider) {\r\n  }\r\n\r\n  load(): any {\r\n    if (this.data) {\r\n   " +
                    "   return of(this.data);\r\n    } else {\r\n      return this.http\r\n        .get(\'as" +
                    "sets/data/data.json\')\r\n        .pipe(map(this.processData, this));\r\n    }\r\n  }\r\n" +
                    "\r\n  processData(data: any) {\r\n    this.data = data;\r\n    return this.data;\r\n  }\r" +
                    "\n\r\n  getAboutData(): Observable<AboutData> {\r\n    return this.load().pipe(\r\n    " +
                    "  map((data: any) => {\r\n        return data.about[0];\r\n      })\r\n    );\r\n  }\r\n\r\n" +
                    "  getWelcomeData(): Observable<WelcomeData> {\r\n    return this.load().pipe(\r\n   " +
                    "   map((data: any) => {\r\n        return data.welcome[0];\r\n      })\r\n    );\r\n  }\r" +
                    "\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\AppDataProvider\AppDataProviderClassTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
