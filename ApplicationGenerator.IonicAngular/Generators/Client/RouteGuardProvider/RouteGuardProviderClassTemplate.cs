// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.RouteGuardProvider
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using AbstraX.DataAnnotations;
    using AbstraX;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class RouteGuardProviderClassTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"import { Injectable } from '@angular/core';
import { CanLoad, Router } from '@angular/router';
import { Storage } from '@ionic/storage';
import { UserDataProvider } from './userdata.provider';


@Injectable({
  providedIn: 'root'
})
export class Check");
            
            #line 26 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RouteName));
            
            #line default
            #line hidden
            this.Write(" implements CanLoad {\r\n");
            
            #line 27 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

    if (this.CheckStorage)
    {

            
            #line default
            #line hidden
            this.Write("  constructor(private storage: Storage, private router: Router, private userData:" +
                    " UserDataProvider) {}\r\n\r\n  canLoad() {\r\n    return this.storage.get(\'");
            
            #line 34 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.StorageVariable));
            
            #line default
            #line hidden
            this.Write("\').then(res => {\r\n      if (res) {\r\n");
            
            #line 36 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

        if (this.DefaultRouteVariable != null)
        {

            
            #line default
            #line hidden
            this.Write("        this.userData.getDefaultRoute().then(r => {\r\n          this.router.naviga" +
                    "teByUrl(r, { replaceUrl: true })\r\n        });\r\n");
            
            #line 43 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("        this.router.navigateByUrl(\'/login\');\r\n");
            
            #line 49 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("        return false;\r\n      } \r\n      else {\r\n        return true;\r\n      }\r\n   " +
                    " });\r\n  }\r\n");
            
            #line 59 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

    }
    else
    {
        DebugUtils.Break();
    }

            
            #line default
            #line hidden
            this.Write("\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\RouteGuardProvider\RouteGuardProviderClassTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _RouteNameField;

/// <summary>
/// Access the RouteName parameter of the template.
/// </summary>
private string RouteName
{
    get
    {
        return this._RouteNameField;
    }
}

private string _DefaultRouteVariableField;

/// <summary>
/// Access the DefaultRouteVariable parameter of the template.
/// </summary>
private string DefaultRouteVariable
{
    get
    {
        return this._DefaultRouteVariableField;
    }
}

private bool _CheckStorageField;

/// <summary>
/// Access the CheckStorage parameter of the template.
/// </summary>
private bool CheckStorage
{
    get
    {
        return this._CheckStorageField;
    }
}

private string _StorageVariableField;

/// <summary>
/// Access the StorageVariable parameter of the template.
/// </summary>
private string StorageVariable
{
    get
    {
        return this._StorageVariableField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool RouteNameValueAcquired = false;
if (this.Session.ContainsKey("RouteName"))
{
    this._RouteNameField = ((string)(this.Session["RouteName"]));
    RouteNameValueAcquired = true;
}
if ((RouteNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RouteName");
    if ((data != null))
    {
        this._RouteNameField = ((string)(data));
    }
}
bool DefaultRouteVariableValueAcquired = false;
if (this.Session.ContainsKey("DefaultRouteVariable"))
{
    this._DefaultRouteVariableField = ((string)(this.Session["DefaultRouteVariable"]));
    DefaultRouteVariableValueAcquired = true;
}
if ((DefaultRouteVariableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DefaultRouteVariable");
    if ((data != null))
    {
        this._DefaultRouteVariableField = ((string)(data));
    }
}
bool CheckStorageValueAcquired = false;
if (this.Session.ContainsKey("CheckStorage"))
{
    this._CheckStorageField = ((bool)(this.Session["CheckStorage"]));
    CheckStorageValueAcquired = true;
}
if ((CheckStorageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("CheckStorage");
    if ((data != null))
    {
        this._CheckStorageField = ((bool)(data));
    }
}
bool StorageVariableValueAcquired = false;
if (this.Session.ContainsKey("StorageVariable"))
{
    this._StorageVariableField = ((string)(this.Session["StorageVariable"]));
    StorageVariableValueAcquired = true;
}
if ((StorageVariableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("StorageVariable");
    if ((data != null))
    {
        this._StorageVariableField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
