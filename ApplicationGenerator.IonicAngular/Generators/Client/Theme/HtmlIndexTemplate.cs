// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.Theme
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using AbstraX.Resources;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class HtmlIndexTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html lang=\"en\" dir=\"ltr\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n" +
                    "  <title>");
            
            #line 24 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write(@"</title>
  <link rel=""stylesheet"" href=""https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.css"">

  <meta name=""viewport"" content=""viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"">
  <meta name=""format-detection"" content=""telephone=no"">
  <meta name=""author"" content=""");
            
            #line 29 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AuthorName));
            
            #line default
            #line hidden
            this.Write("\">\r\n  <meta name=\"description\" content=\"");
            
            #line 30 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Description));
            
            #line default
            #line hidden
            this.Write(@""">
  <meta name=""msapplication-tap-highlight"" content=""no"">
  <meta name=""generator"" content=""CloudIDEaaS Inc, Copyright © 2020 - Hydra Powered App"">
  <meta name=""generatorUrl"" content=""https://www.cloudideaas.com/hydra/index.htm"">
  <meta name=""theme-color"" content=""");
            
            #line 34 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ThemeColor));
            
            #line default
            #line hidden
            this.Write(@""">
  <meta name=""apple-mobile-web-app-capable"" content=""yes"">
  <meta name=""apple-mobile-web-app-status-bar-style"" content=""black-translucent"">

  <base href=""/"">

  <link rel=""icon"" type=""image/x-icon"" href=""assets/img/appicon.png"">

  <link rel=""apple-touch-icon"" href=""assets/img/appicon.png"">

  <link rel=""manifest"" href=""manifest.json"">
</head>

<body>

  <app-root></app-root>

  <!-- Replace the API key with your own, see:
    https://developers.google.com/maps/documentation/javascript/get-api-key -->
  <!-- <script async="""" defer="""" src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyB8pf6ZdFQj5qw7rc_HSGrhUwQKfIe9ICw""></script> -->

  <noscript>Please enable JavaScript to continue using this application.</noscript>
</body>

</html>
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\Theme\HtmlIndexTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private global::AbstraX.IResourceData _ResourceDataField;

/// <summary>
/// Access the ResourceData parameter of the template.
/// </summary>
private global::AbstraX.IResourceData ResourceData
{
    get
    {
        return this._ResourceDataField;
    }
}

private string _AppNameField;

/// <summary>
/// Access the AppName parameter of the template.
/// </summary>
private string AppName
{
    get
    {
        return this._AppNameField;
    }
}

private string _DescriptionField;

/// <summary>
/// Access the Description parameter of the template.
/// </summary>
private string Description
{
    get
    {
        return this._DescriptionField;
    }
}

private string _AuthorNameField;

/// <summary>
/// Access the AuthorName parameter of the template.
/// </summary>
private string AuthorName
{
    get
    {
        return this._AuthorNameField;
    }
}

private string _ThemeColorField;

/// <summary>
/// Access the ThemeColor parameter of the template.
/// </summary>
private string ThemeColor
{
    get
    {
        return this._ThemeColorField;
    }
}

private global::AbstraX.ObjectProperties.MarketingObjectProperties _MarketingObjectPropertiesField;

/// <summary>
/// Access the MarketingObjectProperties parameter of the template.
/// </summary>
private global::AbstraX.ObjectProperties.MarketingObjectProperties MarketingObjectProperties
{
    get
    {
        return this._MarketingObjectPropertiesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool ResourceDataValueAcquired = false;
if (this.Session.ContainsKey("ResourceData"))
{
    this._ResourceDataField = ((global::AbstraX.IResourceData)(this.Session["ResourceData"]));
    ResourceDataValueAcquired = true;
}
if ((ResourceDataValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ResourceData");
    if ((data != null))
    {
        this._ResourceDataField = ((global::AbstraX.IResourceData)(data));
    }
}
bool AppNameValueAcquired = false;
if (this.Session.ContainsKey("AppName"))
{
    this._AppNameField = ((string)(this.Session["AppName"]));
    AppNameValueAcquired = true;
}
if ((AppNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppName");
    if ((data != null))
    {
        this._AppNameField = ((string)(data));
    }
}
bool DescriptionValueAcquired = false;
if (this.Session.ContainsKey("Description"))
{
    this._DescriptionField = ((string)(this.Session["Description"]));
    DescriptionValueAcquired = true;
}
if ((DescriptionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Description");
    if ((data != null))
    {
        this._DescriptionField = ((string)(data));
    }
}
bool AuthorNameValueAcquired = false;
if (this.Session.ContainsKey("AuthorName"))
{
    this._AuthorNameField = ((string)(this.Session["AuthorName"]));
    AuthorNameValueAcquired = true;
}
if ((AuthorNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AuthorName");
    if ((data != null))
    {
        this._AuthorNameField = ((string)(data));
    }
}
bool ThemeColorValueAcquired = false;
if (this.Session.ContainsKey("ThemeColor"))
{
    this._ThemeColorField = ((string)(this.Session["ThemeColor"]));
    ThemeColorValueAcquired = true;
}
if ((ThemeColorValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ThemeColor");
    if ((data != null))
    {
        this._ThemeColorField = ((string)(data));
    }
}
bool MarketingObjectPropertiesValueAcquired = false;
if (this.Session.ContainsKey("MarketingObjectProperties"))
{
    this._MarketingObjectPropertiesField = ((global::AbstraX.ObjectProperties.MarketingObjectProperties)(this.Session["MarketingObjectProperties"]));
    MarketingObjectPropertiesValueAcquired = true;
}
if ((MarketingObjectPropertiesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("MarketingObjectProperties");
    if ((data != null))
    {
        this._MarketingObjectPropertiesField = ((global::AbstraX.ObjectProperties.MarketingObjectProperties)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
