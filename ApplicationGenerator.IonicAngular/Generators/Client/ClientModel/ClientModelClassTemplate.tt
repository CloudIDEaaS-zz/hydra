<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.Collections.Generic.List<FormField>" name="FormFields" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<ModuleImportDeclaration>" name="Imports" #>
<#@ parameter type="System.Collections.Generic.List<ESModule>" name="Exports" #>
<#@ parameter type="System.Collections.Generic.List<ESModule>" name="Modules" #>
<#@ parameter type="System.Collections.Generic.List<IDeclarable>" name="Declarations" #>
<#@ parameter type="System.Boolean" name="IsIdentityEntity" #>
<#@ parameter type="System.String" name="ModelName" #>
<#@ parameter type="System.String" name="EntityName" #>
<# 
    var modelName = this.ModelName.ToCamelCase();
    var className = this.ModelName;
    var module = new ESModule(className);
    var modelVariable = this.EntityName.ToCamelCase();
    var builder = new StringBuilder();
    var lambdaParameter = modelVariable.Left(1);

    this.Modules.Add(module);

    foreach (var import in this.Imports)
    {
        this.WriteLine(import.DeclarationCode);
    }
#>

export class <#= className #> {
<#
    foreach (var formField in this.FormFields)
    {
        if (!this.IsIdentityEntity || formField.IsClientIdentity())
        {
            var variableName = formField.Name;
            var name = formField.Name;
            var type = formField.ClientDataType;

            builder.AppendWithLeadingIfLength(", ", string.Format("{0}: {1}", variableName.ToCamelCase(), type));
#>
  public <#= this.MakeVariable(modelVariable, variableName) #>: <#= type #>;
<#
        }
    }
#>

  constructor(options: { <#= builder.ToString() #> })
  constructor(<#= lambdaParameter #>: any)
  {
<#
    builder = new StringBuilder();

    foreach (var formField in this.FormFields)
    {
        if (!this.IsIdentityEntity || formField.IsClientIdentity())
        {
            string variableName;
            var name = formField.Name;
            var type = formField.ClientDataType;

            if (formField.IsKey)
            {
                variableName = "id";
            }
            else
            {
                variableName = formField.Name.ToCamelCase();
            }

            builder.AppendWithLeadingIfLength(" && ", string.Format("{0}.{1} !== undefined", lambdaParameter, variableName));
        }
    }
#>
    if (<#= builder.ToString() #>) {
<#
    builder = new StringBuilder();

    foreach (var formField in this.FormFields)
    {
        if (!this.IsIdentityEntity || formField.IsClientIdentity())
        {
            var variableName = formField.Name;
            var name = formField.Name;
            var type = formField.ClientDataType;

            builder.AppendWithLeadingIfLength(", ", string.Format("{0}: {1}", variableName, type));
#>
      this.<#= this.MakeVariable(modelVariable, variableName) #> = <#= lambdaParameter #>.<#= variableName #>;
<#
        }
    }
#>
    }
    else if (<#= lambdaParameter #> !== undefined) {
      (<any>Object).assign(this, <#= lambdaParameter #>);
    } else {
      throw new TypeError("Unexpected arguments to Course constructor")
    }
  }
<#
    builder = new StringBuilder();

    foreach (var formField in this.FormFields)
    {
        if (!this.IsIdentityEntity || formField.IsClientIdentity())
        {
            var variableName = formField.Name;
            var name = formField.Name;
            var type = formField.ClientDataType;

            builder.AppendWithLeadingIfLength(", ", string.Format("{0}: this.{0}", this.MakeVariable(modelVariable, variableName)));
        }
    }
#>

  public get <#= modelVariable #>Data() {
    return { <#= builder.ToString() #> };
  }
}
