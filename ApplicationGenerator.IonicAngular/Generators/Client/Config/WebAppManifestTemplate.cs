// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.Config
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class WebAppManifestTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("{\r\n  \"name\": \"");
            
            #line 15 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"short_name\": \"");
            
            #line 16 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"start_url\": \"index.html\",\r\n  \"display\": \"standalone\",\r\n  \"icons\": [\r\n    {" +
                    "\r\n      \"src\": \"assets/img/appicon.png\",\r\n      \"sizes\": \"512x512\",\r\n      \"type" +
                    "\": \"image/png\"\r\n    }\r\n  ],\r\n  \"background_color\": \"");
            
            #line 26 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.BackgroundColor));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"theme_color\": \"#");
            
            #line 27 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ThemeColor));
            
            #line default
            #line hidden
            this.Write("\"\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\WebAppManifestTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _AppNameField;

/// <summary>
/// Access the AppName parameter of the template.
/// </summary>
private string AppName
{
    get
    {
        return this._AppNameField;
    }
}

private string _BackgroundColorField;

/// <summary>
/// Access the BackgroundColor parameter of the template.
/// </summary>
private string BackgroundColor
{
    get
    {
        return this._BackgroundColorField;
    }
}

private string _ThemeColorField;

/// <summary>
/// Access the ThemeColor parameter of the template.
/// </summary>
private string ThemeColor
{
    get
    {
        return this._ThemeColorField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool AppNameValueAcquired = false;
if (this.Session.ContainsKey("AppName"))
{
    this._AppNameField = ((string)(this.Session["AppName"]));
    AppNameValueAcquired = true;
}
if ((AppNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppName");
    if ((data != null))
    {
        this._AppNameField = ((string)(data));
    }
}
bool BackgroundColorValueAcquired = false;
if (this.Session.ContainsKey("BackgroundColor"))
{
    this._BackgroundColorField = ((string)(this.Session["BackgroundColor"]));
    BackgroundColorValueAcquired = true;
}
if ((BackgroundColorValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BackgroundColor");
    if ((data != null))
    {
        this._BackgroundColorField = ((string)(data));
    }
}
bool ThemeColorValueAcquired = false;
if (this.Session.ContainsKey("ThemeColor"))
{
    this._ThemeColorField = ((string)(this.Session["ThemeColor"]));
    ThemeColorValueAcquired = true;
}
if ((ThemeColorValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ThemeColor");
    if ((data != null))
    {
        this._ThemeColorField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
