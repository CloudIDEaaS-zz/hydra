// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.Config
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\LaunchJsonTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class LaunchJsonTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("{\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n          \"type\":" +
                    " \"chrome\",\r\n          \"request\": \"launch\",\r\n          \"name\": \"Debug ");
            
            #line 19 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\LaunchJsonTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write("\",\r\n          \"preLaunchTask\": \"launch-ionic\",\r\n          \"url\": \"http://localhos" +
                    "t:");
            
            #line 21 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\LaunchJsonTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.PortNumber));
            
            #line default
            #line hidden
            this.Write("\",\r\n          \"sourceMaps\": true,\r\n          \"webRoot\": \"${workspaceRoot}\"\r\n     " +
                    "   }\r\n    ]\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\LaunchJsonTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _AppNameField;

/// <summary>
/// Access the AppName parameter of the template.
/// </summary>
private string AppName
{
    get
    {
        return this._AppNameField;
    }
}

private int _PortNumberField;

/// <summary>
/// Access the PortNumber parameter of the template.
/// </summary>
private int PortNumber
{
    get
    {
        return this._PortNumberField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool AppNameValueAcquired = false;
if (this.Session.ContainsKey("AppName"))
{
    this._AppNameField = ((string)(this.Session["AppName"]));
    AppNameValueAcquired = true;
}
if ((AppNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppName");
    if ((data != null))
    {
        this._AppNameField = ((string)(data));
    }
}
bool PortNumberValueAcquired = false;
if (this.Session.ContainsKey("PortNumber"))
{
    this._PortNumberField = ((int)(this.Session["PortNumber"]));
    PortNumberValueAcquired = true;
}
if ((PortNumberValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PortNumber");
    if ((data != null))
    {
        this._PortNumberField = ((int)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
