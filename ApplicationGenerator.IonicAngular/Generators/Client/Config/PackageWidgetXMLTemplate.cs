// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.Config
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PackageWidgetXMLTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<widget id=\"com.");
            
            #line 18 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.HostName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 18 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write("app\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordo" +
                    "va.apache.org/ns/1.0\">\r\n    <name>");
            
            #line 19 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppName));
            
            #line default
            #line hidden
            this.Write("</name>\r\n    <description>");
            
            #line 20 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AppDescription));
            
            #line default
            #line hidden
            this.Write("</description>\r\n    <author email=\"");
            
            #line 21 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AuthorEmail));
            
            #line default
            #line hidden
            this.Write("\" href=\"");
            
            #line 21 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AuthorUrl));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 21 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TeamName));
            
            #line default
            #line hidden
            this.Write(@"</author>
    <content src=""index.html"" />
    <access origin=""*"" />
    <allow-intent href=""http://*/*"" />
    <allow-intent href=""https://*/*"" />
    <allow-intent href=""tel:*"" />
    <allow-intent href=""sms:*"" />
    <allow-intent href=""mailto:*"" />
    <allow-intent href=""geo:*"" />
    <preference name=""ScrollEnabled"" value=""false"" />
    <preference name=""android-minSdkVersion"" value=""19"" />
    <preference name=""BackupWebStorage"" value=""none"" />
    <preference name=""SplashMaintainAspectRatio"" value=""true"" />
    <preference name=""FadeSplashScreenDuration"" value=""300"" />
    <preference name=""SplashShowOnlyFirstTime"" value=""false"" />
    <preference name=""SplashScreen"" value=""screen"" />
    <preference name=""SplashScreenDelay"" value=""3000"" />
    <plugin name=""cordova-plugin-device"" spec=""^2.0.2"" />
    <plugin name=""cordova-plugin-inappbrowser"" spec=""^3.0.0"" />
    <plugin name=""cordova-plugin-splashscreen"" spec=""^5.0.2"" />
    <plugin name=""cordova-plugin-whitelist"" spec=""^1.3.2"" />
    <plugin name=""cordova-plugin-ionic-webview"" spec=""2.0.0-beta.1"" />
    <plugin name=""cordova-plugin-statusbar"" spec=""^2.4.2"" />
    <plugin name=""cordova-plugin-ionic-keyboard"" spec=""^2.1.2"" />
    <engine name=""ios"" spec=""^4.5.5"" />
    <engine name=""android"" spec=""7.0.0"" />
</widget>
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\Config\PackageWidgetXMLTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _AppNameField;

/// <summary>
/// Access the AppName parameter of the template.
/// </summary>
private string AppName
{
    get
    {
        return this._AppNameField;
    }
}

private string _HostNameField;

/// <summary>
/// Access the HostName parameter of the template.
/// </summary>
private string HostName
{
    get
    {
        return this._HostNameField;
    }
}

private string _AppDescriptionField;

/// <summary>
/// Access the AppDescription parameter of the template.
/// </summary>
private string AppDescription
{
    get
    {
        return this._AppDescriptionField;
    }
}

private string _AuthorEmailField;

/// <summary>
/// Access the AuthorEmail parameter of the template.
/// </summary>
private string AuthorEmail
{
    get
    {
        return this._AuthorEmailField;
    }
}

private string _AuthorUrlField;

/// <summary>
/// Access the AuthorUrl parameter of the template.
/// </summary>
private string AuthorUrl
{
    get
    {
        return this._AuthorUrlField;
    }
}

private string _TeamNameField;

/// <summary>
/// Access the TeamName parameter of the template.
/// </summary>
private string TeamName
{
    get
    {
        return this._TeamNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool AppNameValueAcquired = false;
if (this.Session.ContainsKey("AppName"))
{
    this._AppNameField = ((string)(this.Session["AppName"]));
    AppNameValueAcquired = true;
}
if ((AppNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppName");
    if ((data != null))
    {
        this._AppNameField = ((string)(data));
    }
}
bool HostNameValueAcquired = false;
if (this.Session.ContainsKey("HostName"))
{
    this._HostNameField = ((string)(this.Session["HostName"]));
    HostNameValueAcquired = true;
}
if ((HostNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("HostName");
    if ((data != null))
    {
        this._HostNameField = ((string)(data));
    }
}
bool AppDescriptionValueAcquired = false;
if (this.Session.ContainsKey("AppDescription"))
{
    this._AppDescriptionField = ((string)(this.Session["AppDescription"]));
    AppDescriptionValueAcquired = true;
}
if ((AppDescriptionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AppDescription");
    if ((data != null))
    {
        this._AppDescriptionField = ((string)(data));
    }
}
bool AuthorEmailValueAcquired = false;
if (this.Session.ContainsKey("AuthorEmail"))
{
    this._AuthorEmailField = ((string)(this.Session["AuthorEmail"]));
    AuthorEmailValueAcquired = true;
}
if ((AuthorEmailValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AuthorEmail");
    if ((data != null))
    {
        this._AuthorEmailField = ((string)(data));
    }
}
bool AuthorUrlValueAcquired = false;
if (this.Session.ContainsKey("AuthorUrl"))
{
    this._AuthorUrlField = ((string)(this.Session["AuthorUrl"]));
    AuthorUrlValueAcquired = true;
}
if ((AuthorUrlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AuthorUrl");
    if ((data != null))
    {
        this._AuthorUrlField = ((string)(data));
    }
}
bool TeamNameValueAcquired = false;
if (this.Session.ContainsKey("TeamName"))
{
    this._TeamNameField = ((string)(this.Session["TeamName"]));
    TeamNameValueAcquired = true;
}
if ((TeamNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TeamName");
    if ((data != null))
    {
        this._TeamNameField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
