// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.App
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.DataAnnotations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AppComponentPageTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"
<ion-app [class.dark-theme]=""dark"">
  <ion-split-pane contentId=""main-content"">

    <ion-menu contentId=""main-content"">
      <ion-content>

        <accordion [showArrows]=""true"" [closeOthers]=""false"" [expandAll]=""true"">
          <accordion-group heading=""Application"">

            <tree-view [nodes]=""applicationMenuNodes"" [configuration]=""menuTreeConfiguration"" padding=""0px"" [getNodeContent]=""getNodeContentFunction"">
            </tree-view>

            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/app/main/about"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""information-circle""></ion-icon>
                <ion-label>
                  About
                </ion-label>
              </ion-item>
            </ion-menu-toggle>

          </accordion-group>

");
            
            #line 36 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    if (this.HasIdentityProvider)
    {

            
            #line default
            #line hidden
            this.Write(@"          <accordion-group *ngIf=""loggedIn"" heading=""Account"">

            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/account"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""person""></ion-icon>
                <ion-label>
                  Account
                </ion-label>
              </ion-item>
            </ion-menu-toggle>

            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/support"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""help""></ion-icon>
                <ion-label>
                  Support
                </ion-label>
              </ion-item>
            </ion-menu-toggle>

            <ion-menu-toggle autoHide=""false"">
              <ion-item button (click)=""logout()"" detail=""false"">
                <ion-icon slot=""start"" name=""log-out""></ion-icon>
                <ion-label>
                  Logout
                </ion-label>
              </ion-item>
            </ion-menu-toggle>

          </accordion-group>
");
            
            #line 70 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    }

            
            #line default
            #line hidden
            this.Write("\r\n          <accordion-group *ngIf=\"!loggedIn\" heading=\"Account\">\r\n\r\n");
            
            #line 76 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    if (this.HasIdentityProvider)
    {

            
            #line default
            #line hidden
            this.Write(@"            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/login"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""log-in""></ion-icon>
                <ion-label>
                  Login
                </ion-label>
              </ion-item>
            </ion-menu-toggle>
");
            
            #line 88 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    }

            
            #line default
            #line hidden
            this.Write(@"
            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/support"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""help""></ion-icon>
                <ion-label>
                  Support
                </ion-label>
              </ion-item>
            </ion-menu-toggle>
            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/license"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""key""></ion-icon>
                <ion-label>
                  License
                </ion-label>
              </ion-item>
            </ion-menu-toggle>
");
            
            #line 108 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    if (this.HasIdentityProvider)
    {

            
            #line default
            #line hidden
            this.Write(@"            <ion-menu-toggle autoHide=""false"">
              <ion-item routerLink=""/signup"" routerLinkActive=""active"" routerDirection=""root"" detail=""false"">
                <ion-icon slot=""start"" name=""person-add""></ion-icon>
                <ion-label>
                  Signup
                </ion-label>
              </ion-item>
            </ion-menu-toggle>
");
            
            #line 120 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"
  
    }

            
            #line default
            #line hidden
            this.Write(@"
            <ion-item>
              <ion-icon slot=""start"" name=""moon-outline""></ion-icon>
              <ion-label>
                Dark Mode
              </ion-label>
              <ion-toggle [(ngModel)]=""dark""></ion-toggle>
            </ion-item>

          </accordion-group>

          <accordion-group heading=""Home Page"">
            <ion-item button (click)=""openHomePage()"" detail=""false"">
              <ion-icon slot=""start"" name=""hammer""></ion-icon>
              <ion-label>Show Home Page</ion-label>
            </ion-item>
          </accordion-group>
        </accordion>
      </ion-content>
    </ion-menu>

    <ion-router-outlet id=""main-content""></ion-router-outlet>

  </ion-split-pane>

</ion-app>
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\develop\ApplicationGenerator.IonicAngular\Generators\Client\App\AppComponentPageTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private bool _HasIdentityProviderField;

/// <summary>
/// Access the HasIdentityProvider parameter of the template.
/// </summary>
private bool HasIdentityProvider
{
    get
    {
        return this._HasIdentityProviderField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool HasIdentityProviderValueAcquired = false;
if (this.Session.ContainsKey("HasIdentityProvider"))
{
    this._HasIdentityProviderField = ((bool)(this.Session["HasIdentityProvider"]));
    HasIdentityProviderValueAcquired = true;
}
if ((HasIdentityProviderValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("HasIdentityProvider");
    if ((data != null))
    {
        this._HasIdentityProviderField = ((bool)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
