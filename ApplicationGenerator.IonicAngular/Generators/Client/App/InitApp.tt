<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.String" name="IdentityProvider" #>

    let hooks = this.router["hooks"];
    let beforePreactivation = hooks["beforePreactivation"];
    let afterPreactivation = hooks["afterPreactivation"];

    hooks["beforePreactivation"] = (snapshot, runExtras) => {

      let url = snapshot.url.split('/');
      let root = snapshot._root;
      let component;
      let userProvider = this.injector.get<UserProvider>(UserProvider);
      let recurseNodes = (node) => {

        let route = node.value;
        let urlSegment = route.url;

        if (urlSegment.length) {
          let path = url.shift();

          if (path !== urlSegment[urlSegment.length - 1].path) {
            return;
          }
        }
        else if (url.length === 0) {

          component = route.component;

          if (component) {
            console.log();
          }
        }

        node.children.forEach(childNode => {
          recurseNodes(childNode);
        });

      };

      url.shift();
      recurseNodes(root);

      if (component) {
        userProvider.canView(component).then((b) => {
            if (b) {
              beforePreactivation(snapshot, runExtras);
            }
            else {
              throw new Error("Unauthorized view!");
            }
          }).catch((e: Error) => {
              throw new Error("Unauthorized view!, Error" + e.message);
          });
      }
    }

    hooks["afterPreactivation"] = (snapshot, runExtras) => {

      let root = snapshot["_root"];
      afterPreactivation(snapshot, runExtras);
    }
    
    window['_getComponentByName'] = (name: string, makeGlobal?: (string|boolean)): Promise<any> =>
    this.getAllModules()
    .then((modules) => {
      let moduleList = new List<Object>(Object.keys(modules).map(key => modules[key]));
      let exports = moduleList.selectMany((m : any) => {
        let exports = Object.keys(m.exports).map(key => m.exports[key]);
        let exportList = new List<Object>(exports);

        return exportList;
      });

      let modulesWithName = exports.where((e : any) => {
        if (e !== null && typeof e == "function") {
          let functionName = e.name;
          if (functionName == name) {
            return true;
          }
        }
        return false;
      });

      if (modulesWithName.count() == 1) {
        let module = modulesWithName.single();
        return module;
      }
      else {

        let count = modulesWithName.count();

        return Promise.reject(`Searching for module with name: '${ name }' turned up ${ count } results when expecting 1.`)
      }
    })
    .catch(e => {
      console.error(e);
    });
