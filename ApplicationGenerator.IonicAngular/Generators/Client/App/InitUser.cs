// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.App
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.DataAnnotations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\App\InitUser.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class InitUser : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"
    let userProvider = this.injector.get<UserProvider>(UserProvider);
    let defaultRoute;

    defaultRoute = userProvider.handleDefaultRoute(r => {

      switch (r) {
        case ""{00000000-0000-0000-0000-000000000000}"":
          return ""/app/main/about"";
        default:
          throw ""Invalid default route"";
      }
    });

    this.userData.setDefaultRoute(defaultRoute);
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\App\InitUser.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _IdentityProviderField;

/// <summary>
/// Access the IdentityProvider parameter of the template.
/// </summary>
private string IdentityProvider
{
    get
    {
        return this._IdentityProviderField;
    }
}

private global::System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Guid, AbstraX.Angular.Routes.Navigation>> _DefaultRoutesField;

/// <summary>
/// Access the DefaultRoutes parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Guid, AbstraX.Angular.Routes.Navigation>> DefaultRoutes
{
    get
    {
        return this._DefaultRoutesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool IdentityProviderValueAcquired = false;
if (this.Session.ContainsKey("IdentityProvider"))
{
    this._IdentityProviderField = ((string)(this.Session["IdentityProvider"]));
    IdentityProviderValueAcquired = true;
}
if ((IdentityProviderValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IdentityProvider");
    if ((data != null))
    {
        this._IdentityProviderField = ((string)(data));
    }
}
bool DefaultRoutesValueAcquired = false;
if (this.Session.ContainsKey("DefaultRoutes"))
{
    this._DefaultRoutesField = ((global::System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Guid, AbstraX.Angular.Routes.Navigation>>)(this.Session["DefaultRoutes"]));
    DefaultRoutesValueAcquired = true;
}
if ((DefaultRoutesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DefaultRoutes");
    if ((data != null))
    {
        this._DefaultRoutesField = ((global::System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Guid, AbstraX.Angular.Routes.Navigation>>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
