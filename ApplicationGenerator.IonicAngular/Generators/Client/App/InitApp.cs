// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.App
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.DataAnnotations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\App\InitApp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class InitApp : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n    let hooks = this.router[\"hooks\"];\r\n    let beforePreactivation = hooks[\"bef" +
                    "orePreactivation\"];\r\n    let afterPreactivation = hooks[\"afterPreactivation\"];\r\n" +
                    "\r\n    hooks[\"beforePreactivation\"] = (snapshot, runExtras) => {\r\n\r\n      let url" +
                    " = snapshot.url.split(\'/\');\r\n      let root = snapshot._root;\r\n      let compone" +
                    "nt;\r\n      let userProvider = this.injector.get<UserProvider>(UserProvider);\r\n  " +
                    "    let recurseNodes = (node) => {\r\n\r\n        let route = node.value;\r\n        l" +
                    "et urlSegment = route.url;\r\n\r\n        if (urlSegment.length) {\r\n          let pa" +
                    "th = url.shift();\r\n\r\n          if (path !== urlSegment[urlSegment.length - 1].pa" +
                    "th) {\r\n            return;\r\n          }\r\n        }\r\n        else if (url.length " +
                    "=== 0) {\r\n\r\n          component = route.component;\r\n\r\n          if (component) {" +
                    "\r\n            console.log();\r\n          }\r\n        }\r\n\r\n        node.children.fo" +
                    "rEach(childNode => {\r\n          recurseNodes(childNode);\r\n        });\r\n\r\n      }" +
                    ";\r\n\r\n      url.shift();\r\n      recurseNodes(root);\r\n\r\n      if (component) {\r\n  " +
                    "      userProvider.canView(component).then((b) => {\r\n            if (b) {\r\n     " +
                    "         beforePreactivation(snapshot, runExtras);\r\n            }\r\n            e" +
                    "lse {\r\n              throw new Error(\"Unauthorized view!\");\r\n            }\r\n    " +
                    "      }).catch((e: Error) => {\r\n              throw new Error(\"Unauthorized view" +
                    "!, Error\" + e.message);\r\n          });\r\n      }\r\n    }\r\n\r\n    hooks[\"afterPreact" +
                    "ivation\"] = (snapshot, runExtras) => {\r\n\r\n      let root = snapshot[\"_root\"];\r\n " +
                    "     afterPreactivation(snapshot, runExtras);\r\n    }\r\n    \r\n    window[\'_getComp" +
                    "onentByName\'] = (name: string, makeGlobal?: (string|boolean)): Promise<any> =>\r\n" +
                    "    this.getAllModules()\r\n    .then((modules) => {\r\n      let moduleList = new L" +
                    "ist<Object>(Object.keys(modules).map(key => modules[key]));\r\n      let exports =" +
                    " moduleList.selectMany((m : any) => {\r\n        let exports = Object.keys(m.expor" +
                    "ts).map(key => m.exports[key]);\r\n        let exportList = new List<Object>(expor" +
                    "ts);\r\n\r\n        return exportList;\r\n      });\r\n\r\n      let modulesWithName = exp" +
                    "orts.where((e : any) => {\r\n        if (e !== null && typeof e == \"function\") {\r\n" +
                    "          let functionName = e.name;\r\n          if (functionName == name) {\r\n   " +
                    "         return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r" +
                    "\n\r\n      if (modulesWithName.count() == 1) {\r\n        let module = modulesWithNa" +
                    "me.single();\r\n        return module;\r\n      }\r\n      else {\r\n\r\n        let count" +
                    " = modulesWithName.count();\r\n\r\n        return Promise.reject(`Searching for modu" +
                    "le with name: \'${ name }\' turned up ${ count } results when expecting 1.`)\r\n    " +
                    "  }\r\n    })\r\n    .catch(e => {\r\n      console.error(e);\r\n    });\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\App\InitApp.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _IdentityProviderField;

/// <summary>
/// Access the IdentityProvider parameter of the template.
/// </summary>
private string IdentityProvider
{
    get
    {
        return this._IdentityProviderField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool IdentityProviderValueAcquired = false;
if (this.Session.ContainsKey("IdentityProvider"))
{
    this._IdentityProviderField = ((string)(this.Session["IdentityProvider"]));
    IdentityProviderValueAcquired = true;
}
if ((IdentityProviderValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IdentityProvider");
    if ((data != null))
    {
        this._IdentityProviderField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
