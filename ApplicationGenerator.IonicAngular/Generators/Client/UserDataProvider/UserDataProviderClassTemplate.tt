<#@ template debug="false" hostspecific="false" language="C#" inherits="AbstraX.Generators.Base.TemplateBase"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Utils" #>
<#@ import namespace="AbstraX.Generators" #>
<#@ import namespace="AbstraX.Angular" #>
<#@ import namespace="AbstraX.DataAnnotations" #>
<#@ import namespace="AbstraX" #>
<#@ output extension=".html" #>
<#@ parameter type="System.EventHandler" name="DebugCallback" #>
<#@ parameter type="System.String" name="IdentityProvider" #>
<#
    if (this.IdentityProvider == null)
    {
#>
import { Injectable } from '@angular/core';
import { Storage } from '@ionic/storage';


@Injectable({
    providedIn: 'root'
})
export class UserDataProvider {
    favorites: string[] = [];
    HAS_LOGGED_IN = 'hasLoggedIn';
    HAS_SEEN_HOME = 'hasSeenHome';

    constructor(
        public storage: Storage
    ) { }

    hasFavorite(sessionName: string): boolean {
        return (this.favorites.indexOf(sessionName) > -1);
    }

    addFavorite(sessionName: string): void {
        this.favorites.push(sessionName);
    }

    removeFavorite(sessionName: string): void {
        const index = this.favorites.indexOf(sessionName);
        if (index > -1) {
            this.favorites.splice(index, 1);
        }
    }

    login(username: string): Promise<any> {
        return this.storage.set(this.HAS_LOGGED_IN, true).then(() => {
            this.setUsername(username);
            return window.dispatchEvent(new CustomEvent('user:login'));
        });
    }

    signup(username: string): Promise<any> {
        return this.storage.set(this.HAS_LOGGED_IN, true).then(() => {
            this.setUsername(username);
            return window.dispatchEvent(new CustomEvent('user:signup'));
        });
    }

    logout(): Promise<any> {
        return this.storage.remove(this.HAS_LOGGED_IN).then(() => {
            return this.storage.remove('username');
        }).then(() => {
            window.dispatchEvent(new CustomEvent('user:logout'));
        });
    }

    setDefaultRoute(defaultroute: string): Promise<any> {
        return this.storage.set('defaultroute', defaultroute);
    }

    getDefaultRoute(): Promise<string> {
        return this.storage.get('defaultroute').then((value) => {
            return value;
        });
    }

    setUsername(username: string): Promise<any> {
        return this.storage.set('username', username);
    }

    getUsername(): Promise<string> {
        return this.storage.get('username').then((value) => {
            return value;
        });
    }

    isLoggedIn(): Promise<boolean> {
        return this.storage.get(this.HAS_LOGGED_IN).then((value) => {
            return value === true;
        });
    }

    checkHasSeenHome(): Promise<string> {
        return this.storage.get(this.HAS_SEEN_HOME).then((value) => {
            return value;
        });
    }
}
<#
    }
    else
    {
        DebugUtils.Break();
    }
#>
