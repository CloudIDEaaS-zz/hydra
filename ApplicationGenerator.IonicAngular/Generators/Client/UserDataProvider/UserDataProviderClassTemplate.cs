// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AbstraX.Generators.Client.UserDataProvider
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Utils;
    using AbstraX.Generators;
    using AbstraX.Angular;
    using AbstraX.DataAnnotations;
    using AbstraX;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\UserDataProvider\UserDataProviderClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class UserDataProviderClassTemplate : AbstraX.Generators.Base.TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 14 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\UserDataProvider\UserDataProviderClassTemplate.tt"

    if (this.IdentityProvider == null)
    {

            
            #line default
            #line hidden
            this.Write("import { Injectable } from \'@angular/core\';\r\nimport { Storage } from \'@ionic/stor" +
                    "age\';\r\n\r\n\r\n@Injectable({\r\n    providedIn: \'root\'\r\n})\r\nexport class UserDataProvi" +
                    "der {\r\n    favorites: string[] = [];\r\n    HAS_LOGGED_IN = \'hasLoggedIn\';\r\n    HA" +
                    "S_SEEN_HOME = \'hasSeenHome\';\r\n\r\n    constructor(\r\n        public storage: Storag" +
                    "e\r\n    ) { }\r\n\r\n    hasFavorite(sessionName: string): boolean {\r\n        return " +
                    "(this.favorites.indexOf(sessionName) > -1);\r\n    }\r\n\r\n    addFavorite(sessionNam" +
                    "e: string): void {\r\n        this.favorites.push(sessionName);\r\n    }\r\n\r\n    remo" +
                    "veFavorite(sessionName: string): void {\r\n        const index = this.favorites.in" +
                    "dexOf(sessionName);\r\n        if (index > -1) {\r\n            this.favorites.splic" +
                    "e(index, 1);\r\n        }\r\n    }\r\n\r\n    login(username: string): Promise<any> {\r\n " +
                    "       return this.storage.set(this.HAS_LOGGED_IN, true).then(() => {\r\n         " +
                    "   this.setUsername(username);\r\n            return window.dispatchEvent(new Cust" +
                    "omEvent(\'user:login\'));\r\n        });\r\n    }\r\n\r\n    signup(username: string): Pro" +
                    "mise<any> {\r\n        return this.storage.set(this.HAS_LOGGED_IN, true).then(() =" +
                    "> {\r\n            this.setUsername(username);\r\n            return window.dispatch" +
                    "Event(new CustomEvent(\'user:signup\'));\r\n        });\r\n    }\r\n\r\n    logout(): Prom" +
                    "ise<any> {\r\n        return this.storage.remove(this.HAS_LOGGED_IN).then(() => {\r" +
                    "\n            return this.storage.remove(\'username\');\r\n        }).then(() => {\r\n " +
                    "           window.dispatchEvent(new CustomEvent(\'user:logout\'));\r\n        });\r\n " +
                    "   }\r\n\r\n    setDefaultRoute(defaultroute: string): Promise<any> {\r\n        retur" +
                    "n this.storage.set(\'defaultroute\', defaultroute);\r\n    }\r\n\r\n    getDefaultRoute(" +
                    "): Promise<string> {\r\n        return this.storage.get(\'defaultroute\').then((valu" +
                    "e) => {\r\n            return value;\r\n        });\r\n    }\r\n\r\n    setUsername(userna" +
                    "me: string): Promise<any> {\r\n        return this.storage.set(\'username\', usernam" +
                    "e);\r\n    }\r\n\r\n    getUsername(): Promise<string> {\r\n        return this.storage." +
                    "get(\'username\').then((value) => {\r\n            return value;\r\n        });\r\n    }" +
                    "\r\n\r\n    isLoggedIn(): Promise<boolean> {\r\n        return this.storage.get(this.H" +
                    "AS_LOGGED_IN).then((value) => {\r\n            return value === true;\r\n        });" +
                    "\r\n    }\r\n\r\n    checkHasSeenHome(): Promise<string> {\r\n        return this.storag" +
                    "e.get(this.HAS_SEEN_HOME).then((value) => {\r\n            return value;\r\n        " +
                    "});\r\n    }\r\n}\r\n");
            
            #line 103 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\UserDataProvider\UserDataProviderClassTemplate.tt"

    }
    else
    {
        DebugUtils.Break();
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\MC\CloudIDEaaS\root\ApplicationGenerator.IonicAngular\Generators\Client\UserDataProvider\UserDataProviderClassTemplate.tt"

private global::System.EventHandler _DebugCallbackField;

/// <summary>
/// Access the DebugCallback parameter of the template.
/// </summary>
private global::System.EventHandler DebugCallback
{
    get
    {
        return this._DebugCallbackField;
    }
}

private string _IdentityProviderField;

/// <summary>
/// Access the IdentityProvider parameter of the template.
/// </summary>
private string IdentityProvider
{
    get
    {
        return this._IdentityProviderField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool DebugCallbackValueAcquired = false;
if (this.Session.ContainsKey("DebugCallback"))
{
    this._DebugCallbackField = ((global::System.EventHandler)(this.Session["DebugCallback"]));
    DebugCallbackValueAcquired = true;
}
if ((DebugCallbackValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DebugCallback");
    if ((data != null))
    {
        this._DebugCallbackField = ((global::System.EventHandler)(data));
    }
}
bool IdentityProviderValueAcquired = false;
if (this.Session.ContainsKey("IdentityProvider"))
{
    this._IdentityProviderField = ((string)(this.Session["IdentityProvider"]));
    IdentityProviderValueAcquired = true;
}
if ((IdentityProviderValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IdentityProvider");
    if ((data != null))
    {
        this._IdentityProviderField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
